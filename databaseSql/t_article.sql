INSERT INTO `t_article` VALUES ('20170328204526eea', '20170321155043q', 'linux —— 学习笔记（汇总）', '<p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">笔记目录：<strong style=\"margin: 0px; padding: 0px;\">一、系统知识 和 基本概念&nbsp;</strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 二、常用操作</strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 三、系统管理（内存、设备、服务等管理）</strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 四、其他操作</strong></p><hr/><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(153, 204, 0);\"><strong style=\"margin: 0px; padding: 0px;\">一、系统知识 和 基本概念 &nbsp;</strong>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">1.1、 linux 各个分区的作用</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp;参考博主“沉淀”的总结：<a href=\"http://www.cnblogs.com/200911/p/4012161.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">linux目录结构以及作用</a></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">1.2、swap 和 temp 区别</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　swap 用于普通程序的数据交换，temp 用于系统程序的数据交换</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(153, 204, 0);\"><strong style=\"margin: 0px; padding: 0px;\">二、常用操作 &nbsp;</strong>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">2.1、软件安装、卸载、执行</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; 详见我的另一篇博文：<a href=\"http://www.cnblogs.com/BensonLaur/p/5859363.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">linux —— 学习笔记（软件操作：安装、卸载、执行</a><a href=\"http://www.cnblogs.com/BensonLaur/p/5859363.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">)</a></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"link_title\" style=\"margin: 0px; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">2.2、文件、文件夹操作</span></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; 详见我的另一篇博文：<a href=\"http://www.cnblogs.com/BensonLaur/p/5870234.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">linux —— 学习笔记（文件、文件夹操作）</a></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\"><span class=\"link_title\" style=\"margin: 0px; padding: 0px;\">2.4、用户管理</span></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp;详见我的另一篇博文：&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/p/5870223.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">linux —— 学习笔记（用户管理与权限控制）</a></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(153, 204, 0);\"><strong style=\"margin: 0px; padding: 0px;\">三、系统管理（内存、设备、服务等管理）</strong></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">3.1、查看文件大小&nbsp;<span class=\"link_title\" style=\"margin: 0px; padding: 0px;\"><a href=\"http://blog.csdn.net/fyh2003/article/details/6995499\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span style=\"margin: 0px; padding: 0px;\">查看文件大小</span></a></span></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"link_title\" style=\"margin: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp;&nbsp; 使用linux命令df 和du,df。 【 df -h 】 &nbsp; 【du&nbsp;-h&nbsp;--max-depth=<span class=\"number\" style=\"margin: 0px; padding: 0px;\">1&nbsp;/usr】&nbsp;&nbsp;<br/></span></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"link_title\" style=\"margin: 0px; padding: 0px;\">&nbsp;&nbsp;&nbsp; 但是df只能查看一级文件夹大小、使用比例、档案系统及其挂入点，但对文件却无能为力。du可以查看文件及文件夹的大小。所以基本上是两者配合使用。</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"link_title\" style=\"margin: 0px; padding: 0px;\"><span class=\"link_title\" style=\"margin: 0px; padding: 0px;\"><span class=\"link_title\" style=\"margin: 0px; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">3.2、磁盘使用情况分析器</span>&nbsp; &nbsp;baobab &nbsp;<a href=\"https://linux.cn/article-2916-1.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">Link</a></span></span></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"link_title\" style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">3.3、系统服务的操作</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">NAME &nbsp;&nbsp;systemctl - Control the systemd system and service manager &nbsp; &nbsp; &nbsp;　　　　SYNOPSIS &nbsp;systemctl [OPTIONS...] COMMAND [NAME...]</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">NAME &nbsp;&nbsp;service - run a System V init script　　　　　　　　　　　　　　　　　　SYNOPSIS　&nbsp;service SCRIPT COMMAND [OPTIONS]</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">如： systemctl status networking &nbsp;/ &nbsp;service networking restart&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"link_title\" style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">3.4、ifconfig &nbsp;配置网络接口</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">NAME　ifconfig - configure a network interface　　　　SYNOPSIS &nbsp;ifconfig [-v] [-a] [-s] [interface] &nbsp;/ &nbsp;ifconfig [-v] interface [aftype] options | address ...</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">如： -a &nbsp; 查看所有网络接口 &nbsp; &nbsp;ifconfig -s 以简要的格式显示网络接口 &nbsp; ifconfig eth0 up 启动 eth0</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">3.5、进程管理</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">参考链接：管理进程的10个实用命令：<a href=\"http://os.51cto.com/art/201403/432079.htm\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">link</a></p><p class=\"alt\" style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">top</strong></p><p class=\"alt\" style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">htop： 没有的话则先——&nbsp;</strong>sudo&nbsp;apt-get&nbsp;install&nbsp;htop（apt-get 安装原理？）<strong style=\"margin: 0px; padding: 0px;\">）</strong></p><p class=\"alt\" style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">ps</strong>：ps&nbsp;-A&nbsp;|&nbsp;grep&nbsp;firefox　　ps&nbsp;-A&nbsp;|&nbsp;less</p><p class=\"alt\" style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">pstree</strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">kill&nbsp; ：</strong>kill&nbsp;pid 　（kill -KILL或者kill -9 来杀死顽固的进程）</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">pgrep</strong>： 寻找进程ID ，与kill 结合—— kill $（pgrep lantern）</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">pkill &amp; killall</strong>:&nbsp; pkill lantern &lt;=&gt; killall lantern &lt;=&gt; pgrep lantern</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">renice</strong>&nbsp;: renice&nbsp;19&nbsp;pid (改变优先级—— -19非常高， 19非常低，0默认的优先级)</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">xkill</strong>&nbsp;： 高级图形杀，左键点到之处killed，右键取消</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">&nbsp;gonome-system-monitor</strong>&nbsp;：图形化的资源管理器</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(153, 204, 0);\"><strong style=\"margin: 0px; padding: 0px;\">四、其他操作 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</strong></span><em style=\"margin: 0px; padding: 0px; line-height: 1.5;\">&nbsp;</em></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"link_title\" style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\"><span class=\"link_title\" style=\"margin: 0px; padding: 0px;\">待整理：</span></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"link_title\" style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\"><span class=\"link_title\" style=\"margin: 0px; padding: 0px;\">4.1 环境变量的设置</span></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">详见我的另一篇博文：<a href=\"http://www.cnblogs.com/BensonLaur/p/5860246.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">linux —— 学习笔记（环境变量的设置</a><a href=\"http://www.cnblogs.com/BensonLaur/p/5860246.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">)</a></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"link_title\" style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\"><span class=\"link_title\" style=\"margin: 0px; padding: 0px;\">9、挂载外部设备的方法</span></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span class=\"link_title\" style=\"margin: 0px; padding: 0px;\"><span class=\"link_title\" style=\"margin: 0px; padding: 0px;\">None</span></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">6、<a href=\"http://www.cnblogs.com/itech/archive/2009/04/17/1438439.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">vi/vim基本使用方法</a></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">vi宏的使用技巧：<a href=\"http://easwy.com/blog/archives/vi-tip-of-using-recording/\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">link</a></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">查看文件属性：lsattr、ll 、ls -a&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">shell 脚本语法：<a href=\"http://blog.csdn.net/misskissC/article/details/8088128\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">link</a>&nbsp; &nbsp;linux 下创建可运行脚本：<a href=\"http://zhidao.baidu.com/link?url=etk1YYZvS2RL3r-lub04ncYdIfZ7ZYInC0g4qIE_DvXqiZ0pErn5WbrfVeDRG3r6uwk2zbz8RnOWcHxHTgQpxK\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">link</a></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;/bin 下面有常用的指令，可以去探索一下</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;查看以及安装的文件 dpkg -l (redeclipse的删除)</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">make 命令&nbsp;<a href=\"http://www.cnblogs.com/hazir/p/linux_make_examples.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">例解</a>&nbsp;<a href=\"http://www.ruanyifeng.com/blog/2015/02/make.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">命令教程</a></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">tail 命令 用于打印出文件的最后一部分，cat 打印出全部</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">ubuntu sendmail 服务的使用：<a href=\"http://www.polarxiong.com/archives/ubuntu-sendmail.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">查看博文</a></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;防火墙的设置：<a href=\"http://www.veryhuo.com/a/view/16976.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">查看博文</a>&nbsp;&nbsp;<a href=\"http://www.cnblogs.com/xiaofengkang/archive/2011/10/22/2220888.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">2</a></p><p><br/></p>', '2017-3-28 20:45:26', '2017-3-29 13:41:25', 1, 0, 0, '1', '笔记目录：一、系统知识 和 基本概念                   二、常用操作                  三、系统管理（内存、设备、服务等管理）                  四、其他操作 一、系统知识 和 基本概念                          1.1、 linux 各个分区的作用   参考博主“沉淀”的总结：linux目录结构以及作用1.2、swap 和 temp 区别　swap 用于普通程序的数据交换，temp 用于系统程序的数据交换二、常用操作                                               2.1、软件安装、卸载、执行    详见我的另一篇博文：linux —— 学习笔记（软件操作：安装、卸载、执行)2.2、文件、文件夹操作    详见我的另一篇博文：linux —— 学习笔记（文件、文件夹操作）2.4、用户管理   详见我的另一篇博文： linux —— 学习笔记（用户管理与权限控制） 三、系统管理（内存、设备、服务等管理）3.1、查看文件大小 查看文件大小     使用linux命令df 和du,df。 【 df -h 】   【du -h --max-depth=1 /usr】      但是df只能查看一级文件夹大小、使用比例、档案系统及其挂入点，但对文件却无能为力。du可以查看文件及文件夹的大小。所以基本上是两者配合使用。3.2、磁盘使用情况分析器   baobab  Link3.3、系统服务的操作NAME   systemctl - Control the systemd system and service manager      　　　　SYNOPSIS  systemctl [OPTIONS...] COMMAND [NAME...]NAME   service - run a System V init script　　　　　　　　　　　　　　　　　　SYNOPSIS　 service SCRIPT COMMAND [OPTIONS]如： systemctl status networking  /  service networking restart 3.4、ifconfig  配置网络接口NAME　ifconfig - configure a network interface　　　　SYNOPSIS  ifconfig [-v] [-a] [-s] [interface]  /  ifconfig [-v] interface [aftype] options | address ...如： -a   查看所有网络接口    ifconfig -s 以简要的格式显示网络接口   ifconfig eth0 up 启动 eth03.5、进程管理参考链接：管理进程的10个实用命令：linktophtop： 没有的话则先—— sudo apt-get install htop（apt-get 安装原理？））ps：ps -A | grep firefox　　ps -A | lesspstreekill  ：kill pid 　（kill -KILL或者kill -9 来杀死顽固的进程）pgrep： 寻找进程ID ，与kill 结合—— kill $（pgrep lantern）pkill & killall:  pkill lantern <=> killall lantern <=> pgrep lanternrenice : renice 19 pid (改变优先级—— -19非常高， 19非常低，0默认的优先级)xkill ： 高级图形杀，左键点到之处killed，右键取消 gonome-system-monitor ：图形化的资源管理器 四、其他操作                                                待整理：4.1 环境变量的设置详见我的另一篇博文：linux —— 学习笔记（环境变量的设置)9、挂载外部设备的方法None6、vi/vim基本使用方法vi宏的使用技巧：link查看文件属性：lsattr、ll 、ls -a shell 脚本语法：link   linux 下创建可运行脚本：link /bin 下面有常用的指令，可以去探索一下 查看以及安装的文件 dpkg -l (redeclipse的删除)make 命令 例解 命令教程tail 命令 用于打印出文件的最后一部分，cat 打印出全部ubuntu sendmail 服务的使用：查看博文 防火墙的设置：查看博文  2', '0');
INSERT INTO `t_article` VALUES ('20170328204729oof', '20170321155043q', 'linux —— shell 编程（整体框架与基础笔记）', '<table style=\"padding: 20px 20px;\"><tbody><tr class=\"firstRow\"><td style=\"padding: 5px 12px; width: 25px; font-size: 22px; text-align: center; background: #E8E8E8; line-height: 30px; color: #999;\">导读</td><td style=\"padding: 10px 10px 12px; line-height: 20px; font-size: 13px;\"><p><strong>关于shell编程基础的学习，网上有很多资源，如果在校图书馆应该也有一些教程，所以这里对于零碎的基础不做详细记录，而只是对一些常用的概念、命令与操作做一个简要的记录，以备方便查找。</strong></p><p><strong>（本文所有语句的测试均在 Ubuntu 16.04 LTS 上进行）</strong></p></td></tr></tbody></table><hr/><table style=\"padding: 20px 20px;\"><tbody><tr class=\"firstRow\"><td style=\"padding: 5px 12px; width: 25px; font-size: 22px; text-align: left; background: #E8E8E8; color: #999;\">目录</td><td style=\"font: 黑体; font-size: 14px; padding-right: 20px;\"><ol class=\" list-paddingleft-2\"><li><p><a href=\"#title1_1\">终端、shell 和 bash</a></p></li><li><p><a href=\"#title1_2\">常用的基础命令</a></p></li><li><p><a href=\"#title1_3\">Linux Shell 的变量</a></p></li><li><p><a href=\"#title1_4\">编程语法 与 文本处理</a></p></li><li><p><a href=\"#title1_5\">正则表达式</a></p></li><li><p><a href=\"#title1_6\">进程相关</a></p></li></ol></td></tr></tbody></table><p><strong>1、终端、shell 和 bash</strong></p><p class=\"aTitle\">详细的区别与联系：<a href=\"http://www.cnblogs.com/everest33Tong/p/5768695.html\" target=\"_blank\">点这里</a></p><p class=\"aTitle\">一个最简单的 &amp;ldquo;Hello world&amp;rdquo; 显示 程序：</p><p><img id=\"code_img_closed_f842541a-aa90-4813-bba3-20a0d7af6a6c\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\"/><img id=\"code_img_opened_f842541a-aa90-4813-bba3-20a0d7af6a6c\" class=\"code_img_opened\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\"/></p><pre>#!&nbsp;/bin/bashecho&nbsp;&quot;Hello&nbsp;world&quot;</pre><p><span class=\"cnblogs_code_collapse\">echo.sh</span></p><p>#!/bin/bash 的作用：说明是用哪一个shell 来解释文件，如果没写，默认使用 $SHELL 里设置的shell</p><p class=\"aTitle\">#! 可以用来指定不同的命令解释器，比如我们指定 rm 程序, 以下是一个自删除脚本：</p><p><img id=\"code_img_closed_0275dbbf-818c-4117-ae27-b6c93105ba76\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\"/><img id=\"code_img_opened_0275dbbf-818c-4117-ae27-b6c93105ba76\" class=\"code_img_opened\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\"/></p><pre>#!/bin/rm#&nbsp;自删除脚本\n#&nbsp;当你运行这个脚本时，基本上什么都不会发生......&nbsp;当然这个文件消失不见了\nWHATEVER&nbsp;=&nbsp;65echo&nbsp;&quot;This&nbsp;line&nbsp;will&nbsp;never&nbsp;print&quot;&nbsp;&nbsp;&nbsp;&nbsp;exit&nbsp;$WHATEVER&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#脚本不会执行上面这几句</pre><p><span class=\"cnblogs_code_collapse\">#!/bin/rm</span></p><p>&nbsp;</p><p><strong>2、常用的基础命令</strong></p><p>echo：显示一个字符串</p><p>pwd：打印当前工作目录</p><p>whereis: 查看与程序相关的路径</p><p>source: 在当前的环境下执行指定的脚本文件，其执行结果会影响当前环境，比如执行的脚本 中cd执行会影响当前工作目录</p><p>more 或 less : 以翻页的方式查看文件，less 相比与 more 多了一些功能上的特性</p><p>cat: （连接文件）将文件输出到标准输出</p><p>head | tail: 输出文件的头或尾的一部分</p><p>grep: 打印符合特定模式的行</p><p>&gt; | ： 重定向 和 管道</p><p>ls 显示当前目录下的文件（ll 等）</p><p>read: 从标准中读取一行</p><p><img id=\"code_img_closed_aa5955f2-2573-4618-a91f-999f8c9228bc\" class=\"code_img_closed\" src=\"http://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif\" alt=\"\"/><img id=\"code_img_opened_aa5955f2-2573-4618-a91f-999f8c9228bc\" class=\"code_img_opened\" src=\"http://images.cnblogs.com/OutliningIndicators/ExpandedBlockStart.gif\" alt=\"\"/></p><pre>printf&nbsp;&quot;Enter&nbsp;new&nbsp;password:&quot;stty-echoread&nbsp;poss&nbsp;&lt;&nbsp;/dev/tty\nprintf&nbsp;&quot;Enter&nbsp;again&quot;read&nbsp;pass2&nbsp;&lt;&nbsp;/dev/tty\n......</pre><p><span class=\"cnblogs_code_collapse\">例子：/dev/tty 读取密码</span></p><p>文件和文件夹的基本操作：<a href=\"http://www.cnblogs.com/BensonLaur/p/5870234.html\" target=\"_blank\">点这里</a></p><p>&nbsp;</p><p><strong>3、Linux Shell 的变量</strong></p><p><strong>普通变量：</strong></p><p>例子：</p><pre>1&nbsp;vname=&quot;content&quot;2&nbsp;echo&nbsp;&quot;$vname&quot;3&nbsp;echo&nbsp;&#39;$vname&#39;</pre><p>变量赋值：= 的两边不能有任何空格</p><p>变量援引：line 2 显示 &amp;ldquo;content&amp;rdquo; ;line 3 显示 &amp;ldquo;$vname&amp;rdquo;</p><p>数值变量运算：</p><pre>let</pre><p><strong>环境变量：</strong></p><p>unset:从当前shell删除变量或函数</p><p>export：修改当前进程的环境变量</p><p>env:显示环境中的环境变量和对于的值</p><p>注意：env 和 set 函数不同。env函数显示的是环境变量，而set显示的是所有本地变量，包括用户的环境变量。</p><p>环境变量相关文件的设置：<a href=\"http://www.cnblogs.com/BensonLaur/p/5860246.html%20\" target=\"_blank\">点这里</a></p><p>shell 脚本语法：（条件、循环等）&nbsp; <a href=\"http://www.cnblogs.com/rainman/archive/2011/09/16/2179313.html\" target=\"_blank\">点这里</a></p><p><strong>4、编程语法 与 文本处理</strong></p><p>由于这两部分内容相对较多，为避免文章篇幅过大，这两部分分别在具体的文章里记录。</p><p>编程语法：<a href=\"http://www.cnblogs.com/BensonLaur/p/6075977.html\" target=\"_blank\">点这里</a></p><p>文本处理：<a href=\"http://www.cnblogs.com/BensonLaur/p/6080635.html\" target=\"_blank\">点这里</a></p><p><strong>5、正则表达式</strong></p><p><strong>概要</strong></p><p>&nbsp;正则表达式在UNIX/Linux 系统中有广泛的结合与应用，用来强化工具本身的功能。常见的 UNIX 下支持正则表达式的工具有：</p><ul class=\" list-paddingleft-2\"><li><p>用于匹配文本行的 grep 工具族</p></li><li><p>用于改变输入流的 sed 流编辑工具（steam editor）</p></li><li><p>用于处理字符串的语言，如 awk 、python 、perl 、Tcl 等语言</p></li><li><p>文件查看程序，或分页程序，如more ，page，less</p></li><li><p>文本编辑器，如 ed，vi， emacs，vim 等</p></li></ul><p>gerp 族有曾有三种版本：</p><p>grep 最早的文本匹配程序。使用 POSIX 支持的基本正则表达式 （Basic Regular Expression, BRE）</p><p>egrep 拓展的grep 。使用拓展正则表达式 （Extended Regular Expression，ERE）</p><p>fgrep 快速grep (fast/fixed grep)。这个版本用于匹配固定字符串而不是正则表达式</p><p>1992 年 <strong>POSIX标准</strong> 将其合而为一，只推荐使用grep，其他用参数来支持。</p><p><strong>基础</strong></p><p>正则表达式中有两种基本字符匹配，特殊字符（meta Character , 元字符）和一般字符。</p><p><strong>POSIX</strong> BRE 和 ERE 都支持的meta字符：</p><p><span style=\"color: #800000;\"><strong>^</strong>　　　　锚定行或字符串的开始。BRE仅在正则表达式的结尾处有意义，ERE在正表达式的任何地方都</span></p><p><span style=\"color: #800000;\">　　　　　有特殊意义（.*^word &nbsp;在ERE有效，但是意义？）</span></p><p><span style=\"color: #800000;\"><strong>$</strong>　　　　锚定行或字符串的结尾。在BRE 与 ERE的区别同上</span></p><p><span style=\"color: #800000;\"><strong>.</strong>　　　　 匹配一个非换行符的字符。</span></p><p><span style=\"color: #800000;\"><strong>*</strong>　　　 &nbsp; 匹配先前字符任意多个，包括0</span></p><p><span style=\"color: #800000;\"><strong>[...]</strong>　　　方括号表达式（Bracket Expression ），匹配方括号里任意一个字符 [^A-FH-Z] 表示匹</span></p><p><span style=\"color: #800000;\">　　　　　配大写字母G和其他除大写字母外的字符/</span></p><p><span style=\"color: #800000;\"><strong>\\</strong>　　　　　用于打开或关闭后续字符的特殊含义。如 \\(\\)</span></p><p><strong>POSIX</strong> BRE 和ERE 支持不同的meta字符</p><p>仅 BRE:</p><p><span style=\"color: #008000;\"><strong>\\(\\)&nbsp;</strong>　　　　\\(\\)两个符号之间的模式被储存在保留空间（Holding Space），在后续通过转义引用，最多储</span></p><p><span style=\"color: #008000;\">　　　　　　&nbsp;存9个。\\(a\\).*\\1 表示2个a中间有任意字符的串。</span></p><p><span style=\"color: #008000;\"><strong>\\n</strong>　　　　　 与上面的\\(\\)结合使用，n为1~9</span></p><p><span style=\"color: #008000;\"><strong>x\\{m,n\\}</strong>　 x表示模式，表示x出现m～n次，x\\{n\\} &nbsp;表示出现n次,x\\{m,\\} 表示出现至少m次</span></p><p>仅 ERE:</p><p><span style=\"color: #000080;\"><strong>x{m,n}</strong>　　同上一条</span></p><p><span style=\"color: #000080;\"><strong>+</strong>　　　　　相比* , 不包括0</span></p><p><span style=\"color: #000080;\"><strong>?</strong>　　　　　 匹配0个或1个</span></p><p><span style=\"color: #000080;\"><strong>|</strong>　　　　　 匹配前面 &amp;ldquo;或&amp;rdquo; 后面的正则表达式</span></p><p><span style=\"color: #000080;\"><strong>()</strong>　　　　 &nbsp;匹配使用括号括起来的正则表达式群，如 (a.*a)|(b.*b) 表示匹配2个a中间有任意字符的串 或 2个b的情况。</span></p><p><strong>GNU 版本</strong> 的grep 支持额外的 meta字符：</p><p><span style=\"color: #ff0000;\">\\&lt;　　　　锚定单词的开始（不仅仅是行的开始）</span></p><p><span style=\"color: #ff0000;\">\\&gt;　　　　锚定单词的结束</span></p><p><span style=\"color: #ff0000;\">\\w　　　　匹配文字和数字字符，等价于 [A-Za-z0-9]</span></p><p><span style=\"color: #ff0000;\">\\W　　　　\\w 的反义</span></p><p><span style=\"color: #ff0000;\">\\b　　　　锁定单词，如&amp;ldquo;\\bgrep\\b&amp;rdquo;只匹配前后有空格或行开始与行结束的串</span></p><p>为了在不同国家的字符编码中保持一致，POSIX （The Portable Operating System Interface）增加了特殊的字符类：</p><p>[:alnum:]　　A-Za-z0-9</p><p>[:alpha:]　　文字字符</p><p>[:blank:]　　space 和 tab</p><p>[:digit:]　　　数字</p><p>[:graph:]　　非空字符（非空格、控制字符）</p><p>[:lower:]　　小写字符</p><p>[:cntrl:]　　　控制字符</p><p>[:print:]　　 &nbsp;可打印字符，非空字符（包括空格）</p><p>[:punct:]　　标点符号</p><p>[:space:]　　 space &nbsp;和tab 和 换行符</p><p>[:upper:]　　大写字符</p><p>[:xdigit:]　　　十六进制数 （0-9，a-f ,A-F）</p><p>这样就可以使用[:alpha:]匹配中文了；上面字符使用的时候必须置于[] 中才能成为正则表达式。</p><p>比如匹配数字字母下划线： grep -E &quot;[[:digit:][:alpha:]_]+&quot;</p><p>&nbsp;</p><p><strong>6、进程相关</strong></p><p>ps： 显示当前进程的快照 （常用参数 aux 或 -elf ）</p><p>pstree: 打印进程结构</p><p>top : 显示系统的进程</p><p>后台方式启动程序：command &amp;</p><p>jobs： 查看当前会话的作业状态 （-l 参附加地显示任务的进程号）</p><p>Ctrl-Z： 可以使前台任务挂起暂停执行</p><p>bg: &nbsp; (将当前作业带入后台) 对于后台挂起暂停的进程，转到后台继续执行； 使用 %jobID 参数可以指定具体的进程</p><p>fg: &nbsp;将后台进程 (由+号指定) 置于前台</p><p>stty tostop : 如果后台具有终端输出。该命令强制停止该作业</p><p>kill -l : 列出所有进程调度信号</p><p>nice: &nbsp;以指定的优先级启动一个程序</p><p>crontab 和 at ：调度例程或单个（一次）系统任务。</p><p>&nbsp;</p><p>产生信号的方式：</p><p>1) 终端按键：Ctrl+C: SIGINT &nbsp; &nbsp; &nbsp; Ctrl+Z:SIGSTOP &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;Ctrl+\\:SIGQUIT</p><p>2) 通过系统调用：kill -SIGTERM 45624 &nbsp;| &nbsp;kill -9 4546</p><p>3) 通过函数（软件）：kill(SIGTERM,456465);</p><p>&nbsp;</p>', '2017-3-28 20:47:29', '2017-3-29 13:41:19', 2, 0, 0, '1', '导读关于shell编程基础的学习，网上有很多资源，如果在校图书馆应该也有一些教程，所以这里对于零碎的基础不做详细记录，而只是对一些常用的概念、命令与操作做一个简要的记录，以备方便查找。（本文所有语句的测试均在 Ubuntu 16.04 LTS 上进行）目录终端、shell 和 bash常用的基础命令Linux Shell 的变量编程语法 与 文本处理正则表达式进程相关1、终端、shell 和 bash详细的区别与联系：点这里一个最简单的 &ldquo;Hello world&rdquo; 显示 程序：#! /bin/bashecho \"Hello world\"echo.sh#!/bin/bash 的作用：说明是用哪一个shell 来解释文件，如果没写，默认使用 $SHELL 里设置的shell#! 可以用来指定不同的命令解释器，比如我们指定 rm 程序, 以下是一个自删除脚本：#!/bin/rm# 自删除脚本# 当你运行这个脚本时，基本上什么都不会发生...... 当然这个文件消失不见了WHATEVER = 65echo \"This line will never print\"    exit $WHATEVER                        #脚本不会执行上面这几句#!/bin/rm 2、常用的基础命令echo：显示一个字符串pwd：打印当前工作目录whereis: 查看与程序相关的路径source: 在当前的环境下执行指定的脚本文件，其执行结果会影响当前环境，比如执行的脚本 中cd执行会影响当前工作目录more 或 less : 以翻页的方式查看文件，less 相比与 more 多了一些功能上的特性cat: （连接文件）将文件输出到标准输出head | tail: 输出文件的头或尾的一部分grep: 打印符合特定模式的行> | ： 重定向 和 管道ls 显示当前目录下的文件（ll 等）read: 从标准中读取一行printf \"Enter new password:\"stty-echoread poss < /dev/ttyprintf \"Enter again\"read pass2 < /dev/tty......例子：/dev/tty 读取密码文件和文件夹的基本操作：点这里 3、Linux Shell 的变量普通变量：例子：1 vname=\"content\"2 echo \"$vname\"3 echo \'$vname\'变量赋值：= 的两边不能有任何空格变量援引：line 2 显示 &ldquo;content&rdquo; ;line 3 显示 &ldquo;$vname&rdquo;数值变量运算：let环境变量：unset:从当前shell删除变量或函数export：修改当前进程的环境变量env:显示环境中的环境变量和对于的值注意：env 和 set 函数不同。env函数显示的是环境变量，而set显示的是所有本地变量，包括用户的环境变量。环境变量相关文件的设置：点这里shell 脚本语法：（条件、循环等）  点这里4、编程语法 与 文本处理由于这两部分内容相对较多，为避免文章篇幅过大，这两部分分别在具体的文章里记录。编程语法：点这里文本处理：点这里5、正则表达式概要 正则表达式在UNIX/Linux 系统中有广泛的结合与应用，用来强化工具本身的功能。常见的 UNIX 下支持正则表达式的工具有：用于匹配文本行的 grep 工具族用于改变输入流的 sed 流编辑工具（steam editor）用于处理字符串的语言，如 awk 、python 、perl 、Tcl 等语言文件查看程序，或分页程序，如more ，page，less文本编辑器，如 ed，vi， emacs，vim 等gerp 族有曾有三种版本：grep 最早的文本匹配程序。使用 POSIX 支持的基本正则表达式 （Basic Regular Expression, BRE）egrep 拓展的grep 。使用拓展正则表达式 （Extended Regular Expression，ERE）fgrep 快速grep (fast/fixed grep)。这个版本用于匹配固定字符串而不是正则表达式1992 年 POSIX标准 将其合而为一，只推荐使用grep，其他用参数来支持。基础正则表达式中有两种基本字符匹配，特殊字符（meta Character , 元字符）和一般字符。POSIX BRE 和 ERE 都支持的meta字符：^　　　　锚定行或字符串的开始。BRE仅在正则表达式的结尾处有意义，ERE在正表达式的任何地方都　　　　　有特殊意义（.*^word  在ERE有效，但是意义？）$　　　　锚定行或字符串的结尾。在BRE 与 ERE的区别同上.　　　　 匹配一个非换行符的字符。*　　　   匹配先前字符任意多个，包括0[...]　　　方括号表达式（Bracket Expression ），匹配方括号里任意一个字符 [^A-FH-Z] 表示匹　　　　　配大写字母G和其他除大写字母外的字符/\\　　　　　用于打开或关闭后续字符的特殊含义。如 \\(\\)POSIX BRE 和ERE 支持不同的meta字符仅 BRE:\\(\\) 　　　　\\(\\)两个符号之间的模式被储存在保留空间（Holding Space），在后续通过转义引用，最多储　　　　　　 存9个。\\(a\\).*\\1 表示2个a中间有任意字符的串。\\n　　　　　 与上面的\\(\\)结合使用，n为1~9x\\{m,n\\}　 x表示模式，表示x出现m～n次，x\\{n\\}  表示出现n次,x\\{m,\\} 表示出现至少m次仅 ERE:x{m,n}　　同上一条+　　　　　相比* , 不包括0?　　　　　 匹配0个或1个|　　　　　 匹配前面 &ldquo;或&rdquo; 后面的正则表达式()　　　　  匹配使用括号括起来的正则表达式群，如 (a.*a)|(b.*b) 表示匹配2个a中间有任意字符的串 或 2个b的情况。GNU 版本 的grep 支持额外的 meta字符：\\<　　　　锚定单词的开始（不仅仅是行的开始）\\>　　　　锚定单词的结束\\w　　　　匹配文字和数字字符，等价于 [A-Za-z0-9]\\W　　　　\\w 的反义\\b　　　　锁定单词，如&ldquo;\\bgrep\\b&rdquo;只匹配前后有空格或行开始与行结束的串为了在不同国家的字符编码中保持一致，POSIX （The Portable Operating System Interface）增加了特殊的字符类：[:alnum:]　　A-Za-z0-9[:alpha:]　　文字字符[:blank:]　　space 和 tab[:digit:]　　　数字[:graph:]　　非空字符（非空格、控制字符）[:lower:]　　小写字符[:cntrl:]　　　控制字符[:print:]　　  可打印字符，非空字符（包括空格）[:punct:]　　标点符号[:space:]　　 space  和tab 和 换行符[:upper:]　　大写字符[:xdigit:]　　　十六进制数 （0-9，a-f ,A-F）这样就可以使用[:alpha:]匹配中文了；上面字符使用的时候必须置于[] 中才能成为正则表达式。比如匹配数字字母下划线： grep -E \"[[:digit:][:alpha:]_]+\" 6、进程相关ps： 显示当前进程的快照 （常用参数 aux 或 -elf ）pstree: 打印进程结构top : 显示系统的进程后台方式启动程序：command &jobs： 查看当前会话的作业状态 （-l 参附加地显示任务的进程号）Ctrl-Z： 可以使前台任务挂起暂停执行bg:   (将当前作业带入后台) 对于后台挂起暂停的进程，转到后台继续执行； 使用 %jobID 参数可以指定具体的进程fg:  将后台进程 (由+号指定) 置于前台stty tostop : 如果后台具有终端输出。该命令强制停止该作业kill -l : 列出所有进程调度信号nice:  以指定的优先级启动一个程序crontab 和 at ：调度例程或单个（一次）系统任务。 产生信号的方式：1) 终端按键：Ctrl+C: SIGINT       Ctrl+Z:SIGSTOP          Ctrl+\\:SIGQUIT2) 通过系统调用：kill -SIGTERM 45624  |  kill -9 45463) 通过函数（软件）：kill(SIGTERM,456465); ', '0');
INSERT INTO `t_article` VALUES ('20170328205130ujt', '20170321155043q', 'linux —— 编译linux内核', '<p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">目录： &nbsp; &nbsp; 0、测试环境&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1、获得最新内核源代码</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　　　 &nbsp;2、编译源代码</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 3、运行新的内核</p><hr/><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(153, 204, 0);\">0、测试环境：</span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">我的系统&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;：&nbsp;&nbsp;&nbsp;ubuntu&nbsp;16.04&nbsp;LTS&nbsp;(内核版本：4.4.0-36-generic&nbsp;)\n下载源代码内核版本&nbsp;：&nbsp;&nbsp;&nbsp;Linux&nbsp;4.8-rc6\n测试时间&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;：&nbsp;&nbsp;&nbsp;2016/9/16</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(153, 204, 0);\">1、获得最新内核源代码</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">获取方法可以有以下两种：</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp; &nbsp;<span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">1.1 在linux 内核官方主页</span>：<a href=\"http://www.kernel.org/\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">http://www.kernel.org</a>，你永远可以获得&nbsp;当前最新的linux内核源完整的tarball（一种用tar命令生成的 归档/压缩 文件）以及不断发布的 补丁（patch）<span style=\"margin: 0px; padding: 0px; line-height: 1.5;\">&nbsp;.</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; line-height: 1.5;\">&nbsp; &nbsp; &nbsp;<span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">1.2 &nbsp;直接从git上面获取</span>：&nbsp;<a href=\"https://github.com/torvalds/linux\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">https://github.com/torvalds/linux</a>。具体是：Terminal 进入自己想要同步下来的目录后。clone下来：</span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">cd&nbsp;&nbsp;/同步下来/的/目录\ngit&nbsp;clone&nbsp;https://github.com/torvalds/linux.git&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#这个应该有2G多</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;<span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">1.3 编译准备</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">连同源代码和编译后的产生的文件，请准备好20G的硬盘空间！（从git上clone下来的源代码 2.6 G； 经过make后另外生成的编译文件 13.5G 这加起来有17G的空间）</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">/ 根目录（具体来说是 /lib，没挂载/lib的话就默认是使用/目录） 要有至少4G的空余空间</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">/ boot &nbsp; 要有至少 400M 的空余空间</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(255, 0, 0);\">所以请在编译前查看自己是否有对应充足的空间。（我就是不知道这一点重装了两次系统：一次是 /home 不足，一次是/boot不足）</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(153, 204, 0);\">2、编译源代码</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">编译内核：（根据github README 的说明）</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">2.0、在编译前仔细看README</span>，有一些细节得注意例如说：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-size: 12px; background-color: rgb(255, 255, 255);\">DOCUMENTATION:</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;这个说明项里面提到，可以参考的文档网站：<a href=\"http://www.tldp.org/\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">帮助文档项目</a>&nbsp; 还有git项目的目录里document里有部分项目文档的说明等。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-size: 12px; background-color: rgb(255, 255, 255);\">SOFTWARE&nbsp;REQUIREMENTS</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;而这个提到要去看一下 项目目录里的&nbsp;&nbsp;“Documentation/Changes” 的软件要求最低要求（不然后面遇到版本问题会很头大），我使用的时ubuntu 16.04，里面提到的软件版本都符合要求，就是有一些没软件我没有，因为刚接触还不确定需不需要所以没有的我都自己下载了。</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;还有，在开始编译前：要 Make sure you have no stale .o files and dependencies lying around:</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-size: 12px; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cd&nbsp;linux&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#进入git&nbsp;clone&nbsp;下来的linux&nbsp;目录（最顶目录）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;make&nbsp;mrproper\n\n具体还是自己刻苦啃一下&nbsp;&nbsp;比较好。</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">2.1、执行 make menuconfig&nbsp;</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">我决定自定义编译的路径：（ 根据 “BUILD directory for the kernel”）</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">执行：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">make&nbsp;O=/home/bensonlaur/build/kernel&nbsp;menuconfig</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">结果报错：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">/home/bensonlaur/gproject/linux/scripts/kconfig/lxdialog/.h::</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">解决：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">#因为缺少包，安装之，然后重新&nbsp;make&nbsp;menuconfigsudo&nbsp;apt-get&nbsp;install&nbsp;libncurses5-dev</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">2.2、开始按上面的配置结果来 执行: make</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">执行：（由于github 项目里的README说，一旦自定义了build路径，选择了O选项，所有的make都得制定这个路径）</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">&nbsp;make&nbsp;O=/home/bensonlaur/build/kernel</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">（注意：刚才执行 make O=/home/bensonlaur/build/kernel menuconfig 成功时，会显示图形界面给你配置，save 配置为 .config 。</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp; &nbsp;我试过别的名字，这样的话在make这一步会提示：</p><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170328/1490705480214053617.gif\" alt=\"复制代码\"/></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">***\n***&nbsp;Configuration&nbsp;file&nbsp;&quot;.config&quot;&nbsp;not&nbsp;found!\n***\n***&nbsp;Please&nbsp;run&nbsp;some&nbsp;configurator&nbsp;(e.g.&nbsp;&quot;make&nbsp;oldconfig&quot;&nbsp;or***&nbsp;&quot;make&nbsp;menuconfig&quot;&nbsp;or&nbsp;&quot;make&nbsp;xconfig&quot;).***</pre><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170328/1490705480214053617.gif\" alt=\"复制代码\"/></a></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">，我也不知道改了配置名字后，去哪里制定我的别的名字的配置文件，就重新使用make O=/home/bensonlaur/build/kernel menuconfig生成 名为.config的配置文件，于是就没报这个错了&nbsp;）</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">继续make 时继续报错：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">/home/bensonlaur/gproject/linux/scripts/sign-file.c:25:30:&nbsp;fatal&nbsp;error:&nbsp;openssl/opensslv.h:&nbsp;没有那个文件或目录</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">解决：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">#还是因为缺少包，安装之，然后重新&nbsp;执行makesudo&nbsp;apt-get&nbsp;install&nbsp;libssl-dev</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">解决缺少的文件问题后，接着就是漫长的编译等待了</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">（时间需要很长，也消耗空间，第一次都没底，可怜我12G的/home空间本来已经剩下9G，没想到还爆满，也不知道还会生成多少，为了分20G给/home，还重装了一遍系统，还好这次够用）。</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">此过程有很多warning，不知道是什么情况，我先记录在这里：&nbsp;</p><p><img id=\"code_img_closed_49ec28eb-67a6-45c7-b98c-2152faf2c0c8\" class=\"code_img_closed\" src=\"/ueditor/jsp/upload/image/20170328/1490705480390052689.gif\" alt=\"\"/>&nbsp;<span class=\"cnblogs_code_collapse\" style=\"margin: 0px; padding: 2px; border-width: 1px; border-style: solid; border-color: gray; background-color: rgb(255, 255, 255); line-height: 1.5 !important;\">make 过程中的 warning</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">2.3、执行 ：</span><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">sudo make modules_install install</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">我前面指定了O选项，这里同样指定执行：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">sudo&nbsp;make&nbsp;O=/home/bensonlaur/build/kernel&nbsp;modules_install&nbsp;install</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;此过程会在 /lib 生成接近4G的所编译内核的文件，在/boot生成400M的文件（包括initrd.img-4.8.0-rc6，/boot/grub/menu.lst 等）。</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">&nbsp;2.4 配置kernel</span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-size: 12px; background-color: rgb(255, 255, 255);\">CONFIGURING&nbsp;the&nbsp;kernel:\n在README&nbsp;的“CONFIGURING&nbsp;the&nbsp;kernel”里面提到，配置是必要的，如果想要以最小的工作量把已有的自己系统的配置搬过来&nbsp;，执行make&nbsp;oldconfig:</pre><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">sudo&nbsp;make&nbsp;O=/home/bensonlaur/build/kernel&nbsp;oldconfig</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><em style=\"margin: 0px; padding: 0px;\">关于make oldconfig： 不必要的驱动会使内核变得臃肿，不同于386的处理器类型的设置会试内核无法运行在386上，建议不熟悉配置的使用make oldconfig。</em></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;<span style=\"margin: 0px; padding: 0px; background-color: rgb(153, 204, 0);\">3、运行新的内核</span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-size: 12px; background-color: rgb(255, 255, 255);\">&nbsp;-&nbsp;Booting&nbsp;a&nbsp;kernel&nbsp;directly&nbsp;from&nbsp;a&nbsp;floppy&nbsp;without&nbsp;the&nbsp;assistance&nbsp;of&nbsp;a\n&nbsp;&nbsp;&nbsp;bootloader&nbsp;such&nbsp;as&nbsp;LILO,&nbsp;is&nbsp;no&nbsp;longer&nbsp;supported.</pre><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-size: 12px; background-color: rgb(255, 255, 255);\">&nbsp;&nbsp;&nbsp;If&nbsp;you&nbsp;boot&nbsp;Linux&nbsp;from&nbsp;the&nbsp;hard&nbsp;drive,&nbsp;chances&nbsp;are&nbsp;you&nbsp;use&nbsp;LILO,&nbsp;which\n&nbsp;&nbsp;&nbsp;uses&nbsp;the&nbsp;kernel&nbsp;image&nbsp;as&nbsp;specified&nbsp;in&nbsp;the&nbsp;file&nbsp;/etc/lilo.conf.&nbsp;&nbsp;The\n&nbsp;&nbsp;&nbsp;kernel&nbsp;image&nbsp;file&nbsp;is&nbsp;usually&nbsp;/vmlinuz,&nbsp;/boot/vmlinuz,&nbsp;/bzImage&nbsp;or\n&nbsp;&nbsp;&nbsp;/boot/bzImage.&nbsp;&nbsp;To&nbsp;use&nbsp;the&nbsp;new&nbsp;kernel,&nbsp;save&nbsp;a&nbsp;copy&nbsp;of&nbsp;the&nbsp;old&nbsp;image\n&nbsp;&nbsp;&nbsp;and&nbsp;copy&nbsp;the&nbsp;new&nbsp;image&nbsp;over&nbsp;the&nbsp;old&nbsp;one.&nbsp;&nbsp;Then,&nbsp;you&nbsp;MUST&nbsp;RERUN&nbsp;LILO\n&nbsp;&nbsp;&nbsp;to&nbsp;update&nbsp;the&nbsp;loading&nbsp;map!&nbsp;If&nbsp;you&nbsp;don&#39;t,&nbsp;you&nbsp;won&#39;t&nbsp;be&nbsp;able&nbsp;to&nbsp;boot\n&nbsp;&nbsp;&nbsp;the&nbsp;new&nbsp;kernel&nbsp;image.</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">上面说现在启动新的内核需要一个叫 LILO (linux loader)的软件，下面安装并让其自动配置。</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">（ 安装之后执行 liloconfig会自动帮我们检测并生成配置文件 /etc/lilo.conf 和/boot/map等， 这个文件里是具体的配置和说明）</p><p><img id=\"code_img_closed_1ecfe7ad-44b0-4fc9-9925-6117cd8784a0\" class=\"code_img_closed\" src=\"/ueditor/jsp/upload/image/20170328/1490705480390052689.gif\" alt=\"\"/>&nbsp;<span class=\"cnblogs_code_collapse\" style=\"margin: 0px; padding: 2px; border-width: 1px; border-style: solid; border-color: gray; background-color: rgb(255, 255, 255); line-height: 1.5 !important;\">安装lilo 并配置</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">配置完之后从启便可进入我们自己编译的内核了。&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;重启前查看下自己的当前内核版本：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">uname&nbsp;-r</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">重启后菜单里有两个选项：linux &nbsp; &nbsp;linux_old &nbsp; （T_T我的windows不见了，算了后面再解决）(解决办法：<a href=\"http://www.cnblogs.com/BensonLaur/p/5880092.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">linux——启动引导程序 LILO 与 grub</a>&nbsp;中的第5点)</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">选择第一个【linux】，等待一定时间就启动了，所有一切看上去好像没什么变化，再执行一遍：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">uname&nbsp;-r</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;如果看到的版本是最新的你编译的版本，那么恭喜，你正在体验的就是世界上最新鲜的linux内核。</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">那么，接下来想办法去玩一下这个内核吧。：）</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(153, 204, 0);\">获得帮助</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">订阅Linux内核邮件列表 ：<a href=\"http://www.wowotech.net/linux_application/lkml.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">http://www.wowotech.net/linux_application/lkml.html</a></p><hr/><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;<span style=\"margin: 0px; padding: 0px; background-color: rgb(153, 204, 0);\">工具介绍：</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">Oprofile 工具：一个功能强大的性能分析工具，在<a href=\"https://github.com/torvalds/linux/blob/master/Documentation/Changes#LC405\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">这里</a>&nbsp;被推荐下载，下载地址：<a href=\"http://oprofile.sourceforge.net/download/\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">在这里</a>&nbsp;（好像直接系统下载跟方便：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">sudo&nbsp;apt&nbsp;install&nbsp;oprofile</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">）</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">Oprofile的安装和使用：</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">安装说明：<a href=\"http://oprofile.sourceforge.net/faq/\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">这里</a>&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">安装时缺少2个库：</p><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170328/1490705480214053617.gif\" alt=\"复制代码\"/></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">-&nbsp;install&nbsp;libiberty-dev\n\n测试时间：2016/9/16</pre><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration: underline; border: none !important;\"><img src=\"/ueditor/jsp/upload/image/20170328/1490705480214053617.gif\" alt=\"复制代码\"/></a></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;oprofile 库的&nbsp;<a href=\"http://blog.csdn.net/luckywang1103/article/details/44087325\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">安装和使用</a>&nbsp;<a href=\"http://blog.chinaunix.net/uid-13746440-id-3152484.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">2</a></p><p><br/></p>', '2017-3-28 20:51:30', '2017-3-29 13:41:08', 2, 0, 0, '2', '目录：     0、测试环境                 1、获得最新内核源代码　　　　  2、编译源代码                3、运行新的内核0、测试环境：我的系统         ：   ubuntu 16.04 LTS (内核版本：4.4.0-36-generic )下载源代码内核版本 ：   Linux 4.8-rc6测试时间         ：   2016/9/161、获得最新内核源代码获取方法可以有以下两种：     1.1 在linux 内核官方主页：http://www.kernel.org，你永远可以获得 当前最新的linux内核源完整的tarball（一种用tar命令生成的 归档/压缩 文件）以及不断发布的 补丁（patch） .     1.2  直接从git上面获取： https://github.com/torvalds/linux。具体是：Terminal 进入自己想要同步下来的目录后。clone下来：cd  /同步下来/的/目录git clone https://github.com/torvalds/linux.git        #这个应该有2G多 1.3 编译准备连同源代码和编译后的产生的文件，请准备好20G的硬盘空间！（从git上clone下来的源代码 2.6 G； 经过make后另外生成的编译文件 13.5G 这加起来有17G的空间）/ 根目录（具体来说是 /lib，没挂载/lib的话就默认是使用/目录） 要有至少4G的空余空间/ boot   要有至少 400M 的空余空间所以请在编译前查看自己是否有对应充足的空间。（我就是不知道这一点重装了两次系统：一次是 /home 不足，一次是/boot不足） 2、编译源代码编译内核：（根据github README 的说明）2.0、在编译前仔细看README，有一些细节得注意例如说：DOCUMENTATION: 这个说明项里面提到，可以参考的文档网站：帮助文档项目  还有git项目的目录里document里有部分项目文档的说明等。SOFTWARE REQUIREMENTS 而这个提到要去看一下 项目目录里的  “Documentation/Changes” 的软件要求最低要求（不然后面遇到版本问题会很头大），我使用的时ubuntu 16.04，里面提到的软件版本都符合要求，就是有一些没软件我没有，因为刚接触还不确定需不需要所以没有的我都自己下载了。 还有，在开始编译前：要 Make sure you have no stale .o files and dependencies lying around:     cd linux              #进入git clone 下来的linux 目录（最顶目录）     make mrproper具体还是自己刻苦啃一下  比较好。2.1、执行 make menuconfig 我决定自定义编译的路径：（ 根据 “BUILD directory for the kernel”）执行：make O=/home/bensonlaur/build/kernel menuconfig结果报错：/home/bensonlaur/gproject/linux/scripts/kconfig/lxdialog/.h::解决：#因为缺少包，安装之，然后重新 make menuconfigsudo apt-get install libncurses5-dev2.2、开始按上面的配置结果来 执行: make执行：（由于github 项目里的README说，一旦自定义了build路径，选择了O选项，所有的make都得制定这个路径） make O=/home/bensonlaur/build/kernel（注意：刚才执行 make O=/home/bensonlaur/build/kernel menuconfig 成功时，会显示图形界面给你配置，save 配置为 .config 。   我试过别的名字，这样的话在make这一步会提示：****** Configuration file \".config\" not found!****** Please run some configurator (e.g. \"make oldconfig\" or*** \"make menuconfig\" or \"make xconfig\").***，我也不知道改了配置名字后，去哪里制定我的别的名字的配置文件，就重新使用make O=/home/bensonlaur/build/kernel menuconfig生成 名为.config的配置文件，于是就没报这个错了 ）继续make 时继续报错：/home/bensonlaur/gproject/linux/scripts/sign-file.c:25:30: fatal error: openssl/opensslv.h: 没有那个文件或目录解决：#还是因为缺少包，安装之，然后重新 执行makesudo apt-get install libssl-dev解决缺少的文件问题后，接着就是漫长的编译等待了（时间需要很长，也消耗空间，第一次都没底，可怜我12G的/home空间本来已经剩下9G，没想到还爆满，也不知道还会生成多少，为了分20G给/home，还重装了一遍系统，还好这次够用）。此过程有很多warning，不知道是什么情况，我先记录在这里：  make 过程中的 warning2.3、执行 ：sudo make modules_install install我前面指定了O选项，这里同样指定执行：sudo make O=/home/bensonlaur/build/kernel modules_install install 此过程会在 /lib 生成接近4G的所编译内核的文件，在/boot生成400M的文件（包括initrd.img-4.8.0-rc6，/boot/grub/menu.lst 等）。 2.4 配置kernelCONFIGURING the kernel:在README 的“CONFIGURING the kernel”里面提到，配置是必要的，如果想要以最小的工作量把已有的自己系统的配置搬过来 ，执行make oldconfig:sudo make O=/home/bensonlaur/build/kernel oldconfig关于make oldconfig： 不必要的驱动会使内核变得臃肿，不同于386的处理器类型的设置会试内核无法运行在386上，建议不熟悉配置的使用make oldconfig。 3、运行新的内核 - Booting a kernel directly from a floppy without the assistance of a   bootloader such as LILO, is no longer supported.   If you boot Linux from the hard drive, chances are you use LILO, which   uses the kernel image as specified in the file /etc/lilo.conf.  The   kernel image file is usually /vmlinuz, /boot/vmlinuz, /bzImage or   /boot/bzImage.  To use the new kernel, save a copy of the old image   and copy the new image over the old one.  Then, you MUST RERUN LILO   to update the loading map! If you don\'t, you won\'t be able to boot   the new kernel image.上面说现在启动新的内核需要一个叫 LILO (linux loader)的软件，下面安装并让其自动配置。（ 安装之后执行 liloconfig会自动帮我们检测并生成配置文件 /etc/lilo.conf 和/boot/map等， 这个文件里是具体的配置和说明） 安装lilo 并配置配置完之后从启便可进入我们自己编译的内核了。  重启前查看下自己的当前内核版本：uname -r重启后菜单里有两个选项：linux    linux_old   （T_T我的windows不见了，算了后面再解决）(解决办法：linux——启动引导程序 LILO 与 grub 中的第5点)选择第一个【linux】，等待一定时间就启动了，所有一切看上去好像没什么变化，再执行一遍：uname -r 如果看到的版本是最新的你编译的版本，那么恭喜，你正在体验的就是世界上最新鲜的linux内核。那么，接下来想办法去玩一下这个内核吧。：） 获得帮助订阅Linux内核邮件列表 ：http://www.wowotech.net/linux_application/lkml.html 工具介绍：Oprofile 工具：一个功能强大的性能分析工具，在这里 被推荐下载，下载地址：在这里 （好像直接系统下载跟方便：sudo apt install oprofile）Oprofile的安装和使用：安装说明：这里 安装时缺少2个库：- install libiberty-dev测试时间：2016/9/16 oprofile 库的 安装和使用 2', '0');
INSERT INTO `t_article` VALUES ('20170328205321emg', '20170321155043q', 'linux —— shell 编程（编程语法）', '<table><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding-right: 12px; padding-left: 12px; border-color: silver; border-collapse: collapse; font-size: 22px; text-align: center; background: rgb(232, 232, 232); line-height: 30px; color: rgb(153, 153, 153);\" width=\"25\">导读</td><td style=\"margin: 0px; padding-top: 10px; padding-bottom: 12px; border-color: silver; border-collapse: collapse; line-height: 20px; font-size: 13px;\"><p style=\"margin: 10px auto;\"><strong style=\"margin: 0px; padding: 0px;\">本文为博文<a href=\"http://www.cnblogs.com/BensonLaur/p/5849740.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">&nbsp;linux —— shell 编程（整体框架与基础笔记）</a>的第4小点的拓展。<strong style=\"margin: 0px; padding: 0px;\">（本文所有语句的测试均在 Ubuntu 16.04 LTS 上进行）</strong></strong></p></td></tr></tbody></table><hr/><table><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding-right: 12px; padding-left: 12px; border-color: silver; border-collapse: collapse; font-size: 22px; background: rgb(232, 232, 232); color: rgb(153, 153, 153);\" width=\"25\">目录</td><td style=\"margin: 0px; padding: 3px 20px 3px 3px; border-color: silver; border-collapse: collapse; font-size: 14px;\"><ol style=\"padding: 0px 0px 0px 40px;\" class=\" list-paddingleft-2\"><li><p><a href=\"http://www.cnblogs.com/BensonLaur/p/6075977.html#title1_1\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">再识变量</a></p></li><li><p><a href=\"http://www.cnblogs.com/BensonLaur/p/6075977.html#title1_2\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">函数</a></p></li><li><p><a href=\"http://www.cnblogs.com/BensonLaur/p/6075977.html#title1_3\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">条件语句</a></p></li><li><p><a href=\"http://www.cnblogs.com/BensonLaur/p/6075977.html#title1_4\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">循环语句</a></p></li></ol></td></tr></tbody></table><p><strong style=\"margin: 0px; padding: 0px;\">1、再识变量</strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">Shell 中有3种变量：用户变量、位置变量、环境变量</p><p><strong style=\"margin: 0px; padding: 0px;\">用户变量</strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">用户变量就是用户在Shell编程过程中定义的变量，分为全局变量和局部变量。默认情况下，用户定义的变量为全局变量，如果要指定局部变量，需要使用local限定词</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">1）Shell 中的特殊符号：</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">特殊字符列表如下：</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 128);\">～　　　　主目录，相当与$HOME</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 128);\">`　　　　 命令替换，如 echo `pwd`</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 128);\">#　　　　脚本注释</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 128);\">$　　　　变量表达式符号</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 128);\">&amp;　　　　后台作业，将此符号置于命令末端则让命令与后台运行</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 128);\">*　　　　字符串通配符</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 128);\">( &nbsp;)　　　( 启动子Shell &nbsp; &nbsp;) 停止子Shell</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 128);\">\\　　　　转义下一个字符</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 128);\">|　　　　管道</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 128);\">[ &nbsp;]　　　　[ 开始字符集通配符号 &nbsp;] 结束字符集通配符号</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 128);\">{ &nbsp;}　　　{ 开始命令块 &nbsp; &nbsp;}结束命令块</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 128);\">;　　　　Shell 命令分隔符　　　　&nbsp;</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 128);\">&#39; &nbsp;&quot;　　　　强引用 &nbsp;和 弱引用</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 128);\">&gt; &lt;　　　　输出重定向 和 输入重定向</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 128);\">/　　　　　　路径名目录分隔符</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 128);\">?　　　　　　单个任意字符</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><span style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 128);\">!　　　　　　管道行逻辑 NOT</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">变量的表达方式 $var 实际上是 ${var} 的简写形式，{}的形式好处如： ${10} ${Var}_ 以及可以进行下面的字符串高级操作</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">2）字符串操作符</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">字符串处理运算符允许你完成如下操作：&nbsp;</p><ul style=\"margin-left: 30px; padding: 0px; word-break: break-all; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>&nbsp;保证变量存在且有值</p></li><li><p>设置变量的默认值</p></li><li><p>捕获未设置变量而导致的错误</p></li><li><p>删除匹配模式的变量的值部分内容</p></li></ul><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">替换运算符：${varname:-word}　　　　varname 存在且非null，返回varname , 否则返回word &nbsp;(未定义返回默认值)${varname:=word}　　　 &nbsp;varname 存在且非null，返回varname , 否则返回word，并且将varname 置为word (未定义设置默认值)${varname:?message}　　varname 存在且非null，返回varname , 否则打印 message , 并退出当前脚本。　　　　　　　　　　　　　　message 默认为parameter null or not set &nbsp;　　　　(捕捉未定义而导致的错误)${varname:+word}　　　　varname 存在且非null，返回 word; 否则返回 null &nbsp; &nbsp; (测试变量是否存在)</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">模式匹配运算符：${varname#pattern}　　　　如果模式匹配变量值取值的 开头 处，则删除匹配的最 短 部分，并返回剩下部分${varname##pattern}　　　 如果模式匹配变量值取值的 开头 处，则删除匹配的最 长 部分，并返回剩下部分${varname%pattern}　　　 &nbsp;如果模式匹配变量值取值的 结尾 处，则删除匹配的最 短 部分，并返回剩下部分${varname%%pattern}　　 &nbsp;如果模式匹配变量值取值的 结尾 处，则删除匹配的最 长 部分，并返回剩下部分${varname/pattern/str}　　 &nbsp;替换第一个匹配的部分， 如果模式以#开头则匹配varname开头，%开头 则结尾${varname//pattern/str}　　 替换所有匹配的部分　　　　　　　　　　　　　　 &nbsp;str 为空则删除匹配部分，varname 为@或* 则依次应用于每个参数并拓展为结果列表</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;例子：line=&quot;arg=123&quot; &nbsp;: echo ${line%=*} &nbsp; echo ${line#*=}</p><p><strong style=\"margin: 0px; padding: 0px;\">位置变量</strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">$# &nbsp; &nbsp;$? &nbsp; $0 &nbsp; &nbsp;$* &nbsp; &nbsp; 分别表示传递给本脚本的 参数个数、上一条命令的返回值、第一个参数、所有参数</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">shift : &nbsp;Shell 内置命令，可以截去参数列表最左边一个</p><p>&nbsp;<span class=\"cnblogs_code_collapse\" style=\"margin: 0px; padding: 2px; border-width: 1px; border-style: solid; border-color: gray; background-color: rgb(255, 255, 255); line-height: 1.5 !important;\">shift.sh</span></p><p><strong style=\"margin: 0px; padding: 0px;\">环境变量</strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">查看另一篇博文：<a href=\"http://www.cnblogs.com/BensonLaur/p/5849740.html#title1_3\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">变量基础</a>&nbsp;&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/p/5860246.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">设置环境变量</a></p><p><strong style=\"margin: 0px; padding: 0px;\">2、函数</strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">1）Shell 命令执行顺序</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">交互Shell 在获取用户输入是，并不是直接在PATH 路径中查找，而是按照固定顺序依次寻找命令位置：</p><ul style=\"margin-left: 30px; padding: 0px; word-break: break-all; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>别名　　　　即使用alias command=&quot;...&quot; 创建的命令</p></li><li><p>关键字　　　如 if, for</p></li><li><p>函数　　　　当前声明的函数</p></li><li><p>内置命令　　如 cd，pwd</p></li><li><p>外部命令 &nbsp; &nbsp; &nbsp;即脚本或可执行程序，这才在PATH路径中查找</p></li></ul><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">type 命令：可以查询命令的类型</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">2) 函数的使用规则</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">函数使用时，应遵守一些重要规则：</p><ul style=\"margin-left: 30px; padding: 0px; word-break: break-all; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\" class=\" list-paddingleft-2\"><li><p>函数必须先定义，后使用</p></li><li><p>函数在当前环境运行，共享调用它的脚本中的变量，函数可以接收位置参数，局部变量使用local限定</p></li><li><p>exit 退出整个脚本， return 返回调用处,返回值为最后一条命令的退出状态</p></li><li><p>内置命令 export -f 可以将函数导出到子Shell中</p></li><li><p>如果函数保存在其他文件中，可以使用source 或dot 将它们装入当前脚本中</p></li><li><p>函数可以递归调用，并且没有调用限制</p></li><li><p>declare -f 可以找到登录会话中定义的函数，按字母打印（很多，more less 辅助阅读）-F 则仅看函数名。</p></li></ul><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">3）若想每次启动系统是自动加载函数，只需要将函数写入启动文件中。例如，$HOME/.profile &nbsp; ，则source $HOME/.profile 会自动加载函数。</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">4）定义和删除函数</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">function&nbsp;functionname&nbsp;()&nbsp;&nbsp;&nbsp;#&nbsp;这种情况，（）不是必须的\n{&nbsp;Shell&nbsp;commands}</pre><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">functionname&nbsp;()&nbsp;\n{&nbsp;Shell&nbsp;commands}</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">删除函数：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">unset&nbsp;-f&nbsp;functionname</pre><p>&nbsp;<span class=\"cnblogs_code_collapse\" style=\"margin: 0px; padding: 2px; border-width: 1px; border-style: solid; border-color: gray; background-color: rgb(255, 255, 255); line-height: 1.5 !important;\">演示函数的返回值</span></p><p><strong style=\"margin: 0px; padding: 0px;\">3、条件语句</strong></p><p><strong style=\"margin: 0px; padding: 0px;\">语句结构</strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">if/else 语法结构如下：</p><p><br/></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">if&nbsp;conditionthenstatments\n[elif&nbsp;conditionthen&nbsp;statement&nbsp;...]\n[elsestatements]fi</pre><p><br/></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">这里的condition<strong style=\"margin: 0px; padding: 0px;\">不是一般的布尔表达式</strong>，而是语句列表，语句有各种退出状态。</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">POSIX 定义的退出状态的含义</p><table><caption style=\"margin: 0px; padding: 0px;\">退出状态值与对应的含义</caption><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">0</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">命令成功退出</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">&gt;0</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">在重定向或单词展开期间（～、变量、命令、算数展开、单词切割）失败</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">1~125</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">命令退出失败。特定退出值的定义，参见不同命令的定义</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">126</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">命令找到，但无法执行</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">127</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">命令无法找到</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">&gt;128</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">命令因收到信号而死亡</td></tr></tbody></table><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;退出的状态可以进行逻辑操作：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">if&nbsp;!&nbsp;conditionthenstatementfi</pre><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">if&nbsp;condition1&nbsp;&amp;&amp;&nbsp;condition2then\n&nbsp;&nbsp;&nbsp;&nbsp;statementfi</pre><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">if&nbsp;condition1&nbsp;||&nbsp;condition2then&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;statementfi</pre><p><strong style=\"margin: 0px; padding: 0px;\">条件测试</strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">1) if 语句 使用test</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　if 语句唯一可以测试的内容是退出状态。不能用于检测表达式的值。但是<strong style=\"margin: 0px; padding: 0px;\">通过test命令，可以将表达式值的测试与if语句连用</strong>。</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">if&nbsp;test&nbsp;&quot;2&gt;3&quot;then&nbsp;...&nbsp;\nfi</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">等价于：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">if&nbsp;[&nbsp;&quot;2&gt;3&quot;&nbsp;]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#&nbsp;注意：这里[后的空格，和]前的空格是必须要加的then\n&nbsp;&nbsp;&nbsp;&nbsp;...fi</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">test &quot;&quot; 或 [ &quot;&quot; ] 返回值：0 表示expression 参数为true， 1 表示expression参数为false 或丢失， &gt;1 发生错误</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">2) 字符串比较 (使用test)</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;字符串操作符及其含义</p><table><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">操作符</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">如果...则为真</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">str1 = str2</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">str1 匹配 str2</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">str1 != str2</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">str1 不匹配 str2</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">str1 /&lt; str2</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">str1 小于 str2</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">str2 /&gt; str2</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">str1 大于 str2</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-n str1</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">str1 为非null （长度大于0）</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-z str1</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">str1 为null （长度为0）</td></tr></tbody></table><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">shell 默认所有的变量都为字符串，如果要当成数字来处理，则比较符号为： -eq -gt -lt</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">3) 文件属性的检查(使用test)</p><table><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">操作符</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">如果...则为真</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-b file</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">&nbsp;file 为块设备文件</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-c file</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">&nbsp;file 为字符设备文件</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-d file</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">&nbsp;file 为目录</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-e file</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">file 存在&nbsp;</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-f file</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">&nbsp;file 为一般文件</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-g file</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">&nbsp;file 有设置它的setgid位</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-h file</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">file 为符号连接</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-L file</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">&nbsp;同 -h</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-p file</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">&nbsp;file 为管道</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-r file</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">&nbsp;file 可读</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-S file</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">&nbsp;file 为套接字（socket）</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-s file</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">&nbsp;file 非空</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-u file</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">&nbsp;file 有设置它的setuid位</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-w file</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">file 可写</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-x file</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">fil可执行，如果是目录，则file可被查找</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-O file</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">你是file的所有者</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">-G file</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">file 的组ID匹配你的ID</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">file -nt file2</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">file1 比file2 新</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">file1 -ot file2</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">file1 比file2 旧</td></tr></tbody></table><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">4）case 语句</p><p><br/></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">case&nbsp;expression&nbsp;inpattern1)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statements;;\npattern2&nbsp;|&nbsp;pattern3)&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;statements;;esac;</pre><p><br/></p><p><strong style=\"margin: 0px; padding: 0px;\">4、循环语句</strong></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">for&nbsp;name&nbsp;[in&nbsp;list]do&nbsp;....done</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">例子：</p><p>&nbsp;<span class=\"cnblogs_code_collapse\" style=\"margin: 0px; padding: 2px; border-width: 1px; border-style: solid; border-color: gray; background-color: rgb(255, 255, 255); line-height: 1.5 !important;\">遍历当前目录一级目录文件</span></p><p>&nbsp;<span class=\"cnblogs_code_collapse\" style=\"margin: 0px; padding: 2px; border-width: 1px; border-style: solid; border-color: gray; background-color: rgb(255, 255, 255); line-height: 1.5 !important;\">遍历当前目录下所有文件</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">关于getopt 的例子：<a href=\"http://jobar.iteye.com/blog/1770794\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">点这里</a></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;while/until 循环：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">while&nbsp;condition&nbsp;&nbsp;#condition&nbsp;为真时继续dostatementsdone</pre><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">until&nbsp;condition&nbsp;&nbsp;#condition&nbsp;为假时继续dostatementsdone</pre><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">循环支持，break 和 continue ,如果嵌套循环，还可以在后面加上层数来控制跳出：</p><p><br/></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">while&nbsp;condition&nbsp;&nbsp;1dowhile&nbsp;condition&nbsp;&nbsp;2dobreak&nbsp;2donedone</pre><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration: underline; border: none !important;\"></a></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p><br/></p>', '2017-3-28 20:53:21', '2017-3-29 13:41:04', 6, 1, 0, '1', '导读本文为博文 linux —— shell 编程（整体框架与基础笔记）的第4小点的拓展。（本文所有语句的测试均在 Ubuntu 16.04 LTS 上进行）目录再识变量函数条件语句循环语句1、再识变量Shell 中有3种变量：用户变量、位置变量、环境变量用户变量用户变量就是用户在Shell编程过程中定义的变量，分为全局变量和局部变量。默认情况下，用户定义的变量为全局变量，如果要指定局部变量，需要使用local限定词1）Shell 中的特殊符号：特殊字符列表如下：～　　　　主目录，相当与$HOME`　　　　 命令替换，如 echo `pwd`#　　　　脚本注释$　　　　变量表达式符号&　　　　后台作业，将此符号置于命令末端则让命令与后台运行*　　　　字符串通配符(  )　　　( 启动子Shell    ) 停止子Shell\\　　　　转义下一个字符|　　　　管道[  ]　　　　[ 开始字符集通配符号  ] 结束字符集通配符号{  }　　　{ 开始命令块    }结束命令块;　　　　Shell 命令分隔符　　　　 \'  \"　　　　强引用  和 弱引用> <　　　　输出重定向 和 输入重定向/　　　　　　路径名目录分隔符?　　　　　　单个任意字符!　　　　　　管道行逻辑 NOT变量的表达方式 $var 实际上是 ${var} 的简写形式，{}的形式好处如： ${10} ${Var}_ 以及可以进行下面的字符串高级操作2）字符串操作符字符串处理运算符允许你完成如下操作：  保证变量存在且有值设置变量的默认值捕获未设置变量而导致的错误删除匹配模式的变量的值部分内容替换运算符：${varname:-word}　　　　varname 存在且非null，返回varname , 否则返回word  (未定义返回默认值)${varname:=word}　　　  varname 存在且非null，返回varname , 否则返回word，并且将varname 置为word (未定义设置默认值)${varname:?message}　　varname 存在且非null，返回varname , 否则打印 message , 并退出当前脚本。　　　　　　　　　　　　　　message 默认为parameter null or not set  　　　　(捕捉未定义而导致的错误)${varname:+word}　　　　varname 存在且非null，返回 word; 否则返回 null     (测试变量是否存在)模式匹配运算符：${varname#pattern}　　　　如果模式匹配变量值取值的 开头 处，则删除匹配的最 短 部分，并返回剩下部分${varname##pattern}　　　 如果模式匹配变量值取值的 开头 处，则删除匹配的最 长 部分，并返回剩下部分${varname%pattern}　　　  如果模式匹配变量值取值的 结尾 处，则删除匹配的最 短 部分，并返回剩下部分${varname%%pattern}　　  如果模式匹配变量值取值的 结尾 处，则删除匹配的最 长 部分，并返回剩下部分${varname/pattern/str}　　  替换第一个匹配的部分， 如果模式以#开头则匹配varname开头，%开头 则结尾${varname//pattern/str}　　 替换所有匹配的部分　　　　　　　　　　　　　　  str 为空则删除匹配部分，varname 为@或* 则依次应用于每个参数并拓展为结果列表 例子：line=\"arg=123\"  : echo ${line%=*}   echo ${line#*=}位置变量$#    $?   $0    $*     分别表示传递给本脚本的 参数个数、上一条命令的返回值、第一个参数、所有参数shift :  Shell 内置命令，可以截去参数列表最左边一个 shift.sh环境变量查看另一篇博文：变量基础  设置环境变量2、函数1）Shell 命令执行顺序交互Shell 在获取用户输入是，并不是直接在PATH 路径中查找，而是按照固定顺序依次寻找命令位置：别名　　　　即使用alias command=\"...\" 创建的命令关键字　　　如 if, for函数　　　　当前声明的函数内置命令　　如 cd，pwd外部命令      即脚本或可执行程序，这才在PATH路径中查找type 命令：可以查询命令的类型2) 函数的使用规则函数使用时，应遵守一些重要规则：函数必须先定义，后使用函数在当前环境运行，共享调用它的脚本中的变量，函数可以接收位置参数，局部变量使用local限定exit 退出整个脚本， return 返回调用处,返回值为最后一条命令的退出状态内置命令 export -f 可以将函数导出到子Shell中如果函数保存在其他文件中，可以使用source 或dot 将它们装入当前脚本中函数可以递归调用，并且没有调用限制declare -f 可以找到登录会话中定义的函数，按字母打印（很多，more less 辅助阅读）-F 则仅看函数名。3）若想每次启动系统是自动加载函数，只需要将函数写入启动文件中。例如，$HOME/.profile   ，则source $HOME/.profile 会自动加载函数。4）定义和删除函数function functionname ()   # 这种情况，（）不是必须的{ Shell commands}functionname () { Shell commands}删除函数：unset -f functionname 演示函数的返回值3、条件语句语句结构if/else 语法结构如下：if conditionthenstatments[elif conditionthen statement ...][elsestatements]fi这里的condition不是一般的布尔表达式，而是语句列表，语句有各种退出状态。POSIX 定义的退出状态的含义退出状态值与对应的含义0命令成功退出>0在重定向或单词展开期间（～、变量、命令、算数展开、单词切割）失败1~125命令退出失败。特定退出值的定义，参见不同命令的定义126命令找到，但无法执行127命令无法找到>128命令因收到信号而死亡 退出的状态可以进行逻辑操作：if ! conditionthenstatementfiif condition1 && condition2then    statementfiif condition1 || condition2then     statementfi条件测试1) if 语句 使用test　　if 语句唯一可以测试的内容是退出状态。不能用于检测表达式的值。但是通过test命令，可以将表达式值的测试与if语句连用。if test \"2>3\"then ... fi等价于：if [ \"2>3\" ]          # 注意：这里[后的空格，和]前的空格是必须要加的then    ...fitest \"\" 或 [ \"\" ] 返回值：0 表示expression 参数为true， 1 表示expression参数为false 或丢失， >1 发生错误2) 字符串比较 (使用test) 字符串操作符及其含义操作符如果...则为真str1 = str2str1 匹配 str2str1 != str2str1 不匹配 str2str1 /< str2str1 小于 str2str2 /> str2str1 大于 str2-n str1str1 为非null （长度大于0）-z str1str1 为null （长度为0）shell 默认所有的变量都为字符串，如果要当成数字来处理，则比较符号为： -eq -gt -lt3) 文件属性的检查(使用test)操作符如果...则为真-b file file 为块设备文件-c file file 为字符设备文件-d file file 为目录-e filefile 存在 -f file file 为一般文件-g file file 有设置它的setgid位-h filefile 为符号连接-L file 同 -h-p file file 为管道-r file file 可读-S file file 为套接字（socket）-s file file 非空-u file file 有设置它的setuid位-w filefile 可写-x filefil可执行，如果是目录，则file可被查找-O file你是file的所有者-G filefile 的组ID匹配你的IDfile -nt file2file1 比file2 新file1 -ot file2file1 比file2 旧4）case 语句case expression inpattern1)        statements;;pattern2 | pattern3)         statements;;esac;4、循环语句for name [in list]do ....done例子： 遍历当前目录一级目录文件 遍历当前目录下所有文件关于getopt 的例子：点这里 while/until 循环：while condition  #condition 为真时继续dostatementsdoneuntil condition  #condition 为假时继续dostatementsdone循环支持，break 和 continue ,如果嵌套循环，还可以在后面加上层数来控制跳出：while condition  1dowhile condition  2dobreak 2donedone ', '0');
INSERT INTO `t_article` VALUES ('20170328205414bvd', '20170321155043q', 'linux —— 学习笔记（软件操作：安装、卸载、执行）', '<p style=\"margin: 10px auto; padding: 0px;\">目录：&nbsp;<strong style=\"margin: 0px; padding: 0px;\">0、相关基本命令</strong></p><p style=\"margin: 10px auto; padding: 0px;\">　　 &nbsp; &nbsp;<strong style=\"margin: 0px; padding: 0px;\">1、安装软件</strong></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">　　 &nbsp; &nbsp;2、卸载软件</strong></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">　　 &nbsp; &nbsp;3、打开软件</strong></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">　　　4、其他</strong></p><hr/><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">&nbsp;0、相关基本命令</span></strong></p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp; &nbsp; &nbsp; &nbsp;与软件操作相关的主要命令有：dpkg &nbsp;和 apt-get 。</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp; &nbsp; &nbsp; &nbsp;dpkg &nbsp; ：&nbsp;“dpkg ”是“Debian Packager ”的简写。为 “Debian” 专门开发的套件管理系统，方便软件的安装、更新及移除。所有源自“Debian”的“Linux ”发行版都使用 “dpkg”，例如 “Ubuntu”、“Knoppix ”等 。</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp; &nbsp; &nbsp; &nbsp;apt-get：适用于deb包管理式的操作系统，主要用于自动从互联网的软件仓库中搜索、安装、升级、卸载软件或操作系统。(<a href=\"http://www.cnblogs.com/kulin/archive/2012/07/31/APT_GET_HowWork.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">原理</a>)</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp; &nbsp; &nbsp; &nbsp;apt-get&nbsp;和 dpkg 的区别：<a href=\"http://zhidao.baidu.com/link?url=xcpooe_N6JH8lRKI_pYN8XPc1RFXvn8AAQD8UgOk0RbyCYgJlgPBJMMaFL8WtW_NybejTyanhBIOqCxbMAt5Gq\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">link</a></p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;具体命令说明：</p><table class=\"键值表格\"><caption style=\"margin: 0px; padding: 0px;\">apt-get 常用参数说明</caption><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">命令与参数</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">说明</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">apt-get install xxx&nbsp;</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">安装xxx &nbsp;。如果带有参数，那么-d 表示仅下载 ，-f 表示强制安装 &nbsp;</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">apt-get remove xxx&nbsp;</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">卸载xxx &nbsp;</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">apt-get update</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">同步&nbsp;/etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引，这样才能获取到最新的软件包。</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">apt-get upgrade&nbsp;</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">升级已安装的所有软件包，升级之后的版本就是本地索引里的，因此，在执行 upgrade 之前一定要执行 update, 这样才能是最新的。</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">apt-cache search</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">&nbsp;搜索软件包</td></tr></tbody></table><p style=\"margin: 10px auto; padding: 0px;\"><br/>Tips：建议您经常使用“apt-get update”命令来更新您的软件信息数据库</p><table><caption style=\"margin: 0px; padding: 0px;\">dpkg常用参数说明</caption><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">命令与参数</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">说明</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">dpkg -i package.deb&nbsp;</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">安装包</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">dpkg&nbsp;-r package</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">删除包</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">dpkg -P package&nbsp;</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">删除包（包括配置文件）</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">dpkg -L package&nbsp;</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">列出与该包关联的文件</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">dpkg -l package&nbsp;</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">显示该包的版本</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">dpkg –unpack package.deb&nbsp;</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">解开 deb 包的内容</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">dpkg -S keyword&nbsp;</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">搜索所属的包内容</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">dpkg -l&nbsp;</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">列出当前已安装的包</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">dpkg -c package.deb&nbsp;</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">列出 deb 包的内容</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">dpkg –configure package&nbsp;</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">配置包</td></tr><tr style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">...</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">... 参考链接：<a href=\"http://www.cnblogs.com/xwdreamer/p/3623454.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">http://www.cnblogs.com/xwdreamer/p/3623454.html</a></td></tr></tbody></table><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">1、安装软件</span></strong></p><p><br/></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">#&nbsp;&nbsp;apt-get&nbsp;&nbsp;dpkg&nbsp;-&nbsp;dpkg&nbsp;-i&nbsp;/home/download/</pre><p><br/></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">2、卸载软件</span></strong></p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;<span style=\"background-color: rgb(248, 248, 248); font-family: &quot;Courier New&quot;; white-space: pre-wrap;\">&nbsp;apt-&nbsp;dpkg&nbsp;-&nbsp;dpkg&nbsp;-P&nbsp;xxx.deb&nbsp;&nbsp;&nbsp;#</span>&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">3、打开软件</span></strong></p><p style=\"margin: 10px auto; padding: 0px;\">在linux执行应用程序和在windows有些不同，有些程序的执行需要知道用户权限等知识, 详细的解说：<a href=\"http://www.php100.com/html/program/linux/2013/0904/2876.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">了解如何在linux下使用应用程序</a>&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">在这里列出我使用过的方法，更加全面具体的方法还得参考：<a href=\"http://www.php100.com/html/program/linux/2013/0904/2876.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">了解如何在linux下使用应用程序</a>&nbsp;&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">（暂无）</p><p style=\"margin: 10px auto; padding: 0px;\">执行技巧：在后台执行可以在语句后面添加 &amp; 符号，可以使用 jobs 指令查看进程运行状态。</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; background-color: rgb(204, 255, 204);\">&nbsp;4<strong style=\"margin: 0px; padding: 0px;\">、其他</strong></span></p><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">1）卸载时问题： package is in a very bad inconsistent state; you should&nbsp; reinstall it before attempting configuration， 而又无法重新安装<br/>解决：<code style=\"margin: 0px; padding: 0px;\">sudo dpkg --remove --force-remove-reinstreq ××××</code><br/></span></p><p style=\"margin: 10px auto; padding: 0px;\">2）添加和删除软件源：<span class=\"link_title\" style=\"margin: 0px; padding: 0px;\"><a href=\"http://blog.csdn.net/lu_embedded/article/details/55803500\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">在Ubuntu中添加和删除PPA的软件源</a></span></p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><hr/><table align=\"center\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">版权声明</strong><br/>本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">BensonLaur</a>&nbsp; 和本文原始地址：<br/><a href=\"http://www.cnblogs.com/BensonLaur/p/5859363.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span style=\"margin: 0px; padding: 0px;\">http://www.cnblogs.com/BensonLaur/p/5859363.html</span></a></td></tr></tbody></table><p><br/></p><p><br/></p>', '2017-3-28 20:54:14', '2017-3-29 13:41:00', 13, 1, 0, '1', '目录： 0、相关基本命令　　    1、安装软件　　    2、卸载软件　　    3、打开软件　　　4、其他 0、相关基本命令       与软件操作相关的主要命令有：dpkg  和 apt-get 。       dpkg   ： “dpkg ”是“Debian Packager ”的简写。为 “Debian” 专门开发的套件管理系统，方便软件的安装、更新及移除。所有源自“Debian”的“Linux ”发行版都使用 “dpkg”，例如 “Ubuntu”、“Knoppix ”等 。       apt-get：适用于deb包管理式的操作系统，主要用于自动从互联网的软件仓库中搜索、安装、升级、卸载软件或操作系统。(原理)       apt-get 和 dpkg 的区别：link 具体命令说明：apt-get 常用参数说明命令与参数说明apt-get install xxx 安装xxx  。如果带有参数，那么-d 表示仅下载 ，-f 表示强制安装  apt-get remove xxx 卸载xxx  apt-get update同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引，这样才能获取到最新的软件包。apt-get upgrade 升级已安装的所有软件包，升级之后的版本就是本地索引里的，因此，在执行 upgrade 之前一定要执行 update, 这样才能是最新的。apt-cache search 搜索软件包Tips：建议您经常使用“apt-get update”命令来更新您的软件信息数据库dpkg常用参数说明命令与参数说明dpkg -i package.deb 安装包dpkg -r package删除包dpkg -P package 删除包（包括配置文件）dpkg -L package 列出与该包关联的文件dpkg -l package 显示该包的版本dpkg –unpack package.deb 解开 deb 包的内容dpkg -S keyword 搜索所属的包内容dpkg -l 列出当前已安装的包dpkg -c package.deb 列出 deb 包的内容dpkg –configure package 配置包...... 参考链接：http://www.cnblogs.com/xwdreamer/p/3623454.html1、安装软件#  apt-get  dpkg - dpkg -i /home/download/2、卸载软件  apt- dpkg - dpkg -P xxx.deb   # 3、打开软件在linux执行应用程序和在windows有些不同，有些程序的执行需要知道用户权限等知识, 详细的解说：了解如何在linux下使用应用程序 在这里列出我使用过的方法，更加全面具体的方法还得参考：了解如何在linux下使用应用程序   （暂无）执行技巧：在后台执行可以在语句后面添加 & 符号，可以使用 jobs 指令查看进程运行状态。  4、其他1）卸载时问题： package is in a very bad inconsistent state; you should  reinstall it before attempting configuration， 而又无法重新安装解决：sudo dpkg --remove --force-remove-reinstreq ××××2）添加和删除软件源：在Ubuntu中添加和删除PPA的软件源 版权声明本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者 BensonLaur  和本文原始地址：http://www.cnblogs.com/BensonLaur/p/5859363.html', '0');
INSERT INTO `t_article` VALUES ('20170328205549zeu', '20170321155043q', 'linux —— 搭建网页项目笔记', '<table><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding-right: 12px; padding-left: 12px; border-color: silver; border-collapse: collapse; font-size: 22px; text-align: center; background: rgb(232, 232, 232); line-height: 30px; color: rgb(153, 153, 153);\" width=\"25\">导读</td><td style=\"margin: 0px; padding-top: 10px; padding-bottom: 12px; border-color: silver; border-collapse: collapse; line-height: 20px; font-size: 13px;\"><strong style=\"margin: 0px; padding: 0px;\">本文笔记之用，记录在我在linux下搭建与开发网站时遇到的一些碎片知识，以备将来之需。</strong></td></tr></tbody></table><hr/><table><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding-right: 12px; padding-left: 12px; border-color: silver; border-collapse: collapse; font-size: 22px; background: rgb(232, 232, 232); color: rgb(153, 153, 153);\" width=\"25\">目录</td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse; font-size: 14px;\"><ol style=\"padding: 0px 0px 0px 40px;\" class=\" list-paddingleft-2\"><li><p><a href=\"http://www.cnblogs.com/BensonLaur/p/6060837.html#title1_1\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">数据库相关</a></p></li></ol></td></tr></tbody></table><p><strong style=\"margin: 0px; padding: 0px;\">1、数据库相关</strong></p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;<strong style=\"margin: 0px; padding: 0px;\">1) ubuntu 16.04 LTS 下mysql 的安装与使用&nbsp;</strong></p><p style=\"margin: 10px auto; padding: 0px;\">安装在线软件库里的 mysql 软件：mysql-client-x.x 和 mysql-server-x.x 以及相关的组件</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">sudo&nbsp;apt&nbsp;install&nbsp;mysql-clientsudo&nbsp;apt&nbsp;install&nbsp;mysql-server</pre><p style=\"margin: 10px auto; padding: 0px;\">安装&nbsp;mysql-server 时根据提示进行root 用户密码的设置。</p><p style=\"margin: 10px auto; padding: 0px;\">打开mysql服务：(sudo service mysql status 可查看服务运行的状态)</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">sudo&nbsp;service&nbsp;mysql&nbsp;start</pre><p style=\"margin: 10px auto; padding: 0px;\">以根用户登录数据库：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">mysql&nbsp;-u&nbsp;root&nbsp;-p</pre><p style=\"margin: 10px auto; padding: 0px;\">具体的mysql数据库操作，参考&nbsp;<a href=\"http://dev.mysql.com/doc/#fp-docs-browse\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">官方文档手册</a>&nbsp;中 对应的 MySQL Server 版本 Reference Manual。&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">更多Linux上mysql的安装方法，参考&nbsp;<a href=\"http://dev.mysql.com/doc/mysql-installation-excerpt/5.6/en/linux-installation.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">官方教程</a>&nbsp;。</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p>&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\"><a href=\"http://www.linuxidc.com/Linux/2011-10/44355.htm\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">Ubuntu下Eclipse部署MySQL JDBC驱动</a></p><hr/><table align=\"center\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">版权声明</strong><br/>本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">BensonLaur</a>&nbsp; 和本文原始地址：<br/><a href=\"http://www.cnblogs.com/BensonLaur/p/6060837.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span style=\"margin: 0px; padding: 0px;\">http://www.cnblogs.com/BensonLaur/p/6060837.html</span></a></td></tr></tbody></table><p>分类:&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/category/840545.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">linux相关</a></p><p><br/></p>', '2017-3-28 20:55:49', '2017-3-29 13:40:56', 61, 4, 0, '1', '导读本文笔记之用，记录在我在linux下搭建与开发网站时遇到的一些碎片知识，以备将来之需。目录数据库相关1、数据库相关 1) ubuntu 16.04 LTS 下mysql 的安装与使用 安装在线软件库里的 mysql 软件：mysql-client-x.x 和 mysql-server-x.x 以及相关的组件sudo apt install mysql-clientsudo apt install mysql-server安装 mysql-server 时根据提示进行root 用户密码的设置。打开mysql服务：(sudo service mysql status 可查看服务运行的状态)sudo service mysql start以根用户登录数据库：mysql -u root -p具体的mysql数据库操作，参考 官方文档手册 中 对应的 MySQL Server 版本 Reference Manual。 更多Linux上mysql的安装方法，参考 官方教程 。   Ubuntu下Eclipse部署MySQL JDBC驱动版权声明本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者 BensonLaur  和本文原始地址：http://www.cnblogs.com/BensonLaur/p/6060837.html分类: linux相关', '0');
INSERT INTO `t_article` VALUES ('20170328210022xxq', '20170322154831v', 'Web —— java web 项目 Tomcat 的配置 与 第一个web 项目创建', '<p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; font-size: 15px;\">目录：</span></strong></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; font-size: 15px;\">　　0、前言</span></strong></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; font-size: 15px;\">　　1、Tomcat的配置</span></strong></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; font-size: 15px;\">　　2、第一个Web 项目</span></strong></p><hr/><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51);\">0、前言</h4><p style=\"margin: 10px auto; padding: 0px;\">　　刚刚开始接触web开发，了解的也不多，在这里记录一下我的第一个web项目启动的过程。网上教程很多，使用的java IDE 好像也是各种各样，如：如2009年发表的：<a href=\"http://developer.51cto.com/art/200906/127381.htm\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">谈在Eclipse中配置Tomcat</a>&nbsp;，2014年发表的：<a href=\"http://www.jizhuomi.com/software/357.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">如何配置Java EE Eclipse+Tomcat开发环境</a>&nbsp;等，还有很多杂七杂八的，深感后面配置越来越简单化了，而我使用的应该算是更简单的工具了。</p><p style=\"margin: 10px auto; padding: 0px;\">　　工具越简单化傻瓜化，背后隐藏的原理就相对更多，包装的就更深。该给简单点呢，还是复杂点好呢，就仁者见仁智者见智了。好了，废话不多说，说我的配置过程。</p><p style=\"margin: 10px auto; padding: 0px;\">　　环境：win7 + JDk 1.8 +&nbsp;<a href=\"http://yun.baidu.com/share/link?shareid=2300326256&uk=1896039966\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">apache-tomcat-7.0.52</a>&nbsp;+&nbsp;<a href=\"http://yun.baidu.com/share/link?shareid=1844450896&uk=1896039966\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">MyEclipse Enterprise Workbench v</a><span style=\"margin: 0px; padding: 0px; line-height: 1.5;\"><a href=\"http://yun.baidu.com/share/link?shareid=1844450896&uk=1896039966\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">&nbsp;2014</a>&nbsp;&nbsp;(点击链接 下载)</span></p><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; line-height: 1.5;\">　　注：JDK 的配置网上很多，这里不转述；&nbsp;<a href=\"http://zhidao.baidu.com/link?url=3zSiCn81POrLibF7_Px2hXyxtiqsOT2fWd43iO-PjZoDQxjy7TUVq3qETc7iicl-awPOPxxhB5IZv9hvCOFLZb0i-ZqOjJH23JchS0_CKXK\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">JDK和JRE 区别</a>&nbsp;（有兴趣的可以点击 查看）</span></p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51);\">1、Tomcat的配置</h4><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;　　使用 MyEclipse 和 上面的 tomcat 压缩包安装非常简单。</p><p style=\"margin: 10px auto; padding: 0px;\">　　1）首先配置好jkd环境</p><p style=\"margin: 10px auto; padding: 0px;\">　　2）安装MyEclipse，过程自己解决</p><p style=\"margin: 10px auto; padding: 0px;\">　　3）接着将 apache-tomcat-7.0.52 解压到任意目录（不知道路径包含中文会不会出问题，建议不要含中文，以避免因字符编码不支持而重新的可能）</p><p style=\"margin: 10px auto; padding: 0px;\">　　4）打开MyEclipse ，找到 Window-&gt; Preferences -&gt; MyEclipse -&gt; Servers -&gt; Tomcat -&gt; Tomcat 7.x ，在右面的面板中， “Enable” Tomcat 7.x server ,同时 点击按钮&quot;Browse...&quot; 指定刚才解压 apache-tomcat-7.0.52 的路径，（注意指定的该路径的下一个子目录是直接包含bin 和conf 等子目录的，如 bin 目录为D:\\apache-tomcat-7.0.52\\apache-tomcat-7.0.52\\bin 则指定&nbsp;D:\\apache-tomcat-7.0.52\\apache-tomcat-7.0.52 而不能是D:\\apache-tomcat-7.0.52&nbsp;）</p><p style=\"margin: 10px auto; padding: 0px;\">　　5)点击 应用 或者 “OK” 确认后重启，就算配置好了</p><p style=\"margin: 10px auto; padding: 0px;\">　　6）接下来演示简单的第一个web项目的创建。</p><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; color: rgb(66, 170, 32);\">注：怎么知道自己有没有配置成功呢：使用这种方法配置Tomcat只有在打开myEclipse后自己启动服务——</span></p><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; color: rgb(66, 170, 32);\">　　a）首先打开servers 窗口视图 Window-&gt; show view -&gt; others -&gt; MyEclipse java Enterprise -&gt; servers；</span></p><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; color: rgb(66, 170, 32);\">　　b) 然后右键 点击 servers窗口视图中的 “tomcat 7.x” 项，选择“run Server” 即可启动。&nbsp;</span></p><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; color: rgb(66, 170, 32);\">　　c) tomcat 默认部署了一个网页可供访问测试，打开自己的浏览器，或者在 选择 servers 窗口视图旁边 的 web browser ，在地址栏里输入：http://localhost:8080/访问成功就说明部署成功了</span></p><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; color: rgb(153, 153, 153);\">　　注意：这里的端口是不一定就是确定的8080，例如说我的端口就是8888，应该是8080被别的程序占用了吧。</span></p><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; color: rgb(153, 153, 153);\">　　　　一种查看的方法是：在 tomcat 目录下里的conf 目录，目录下有server.xml &nbsp;，在你面的&lt;connector&gt;标签下，port 会指定你的端口；</span></p><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; color: rgb(153, 153, 153);\">　　　　另一种查看的方法是：查看console窗口&nbsp;服务启动之后&nbsp;的输出[&quot;http-bio-8888&quot;]&nbsp;；</span></p><h4 style=\"margin: 10px 0px; padding: 0px; font-size: 14px; color: rgb(51, 51, 51);\">2、第一个Web 项目</h4><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;　　这里主要说创建一个web项目需要注意一些什么吧，具体其他知识不在这里提出。</p><p style=\"margin: 10px auto; padding: 0px;\">　　1、首先是创建一个 web project。</p><p style=\"margin: 10px auto; padding: 0px;\">　　2、创建的project 需要部署到tomcat 服务器上才能够被本地来访问，部署很简单——在server视图窗口下,右击 tomcat 7.x -&gt; add deployment 选择你要部署的project</p><p style=\"margin: 10px auto; padding: 0px;\">　　3、过了一小小会自动部署完毕，这时候可在浏览器输入你的项目链接即可访问，比如项目名为 testProject 则可以输入http://localhost:8080/testProject/ 就可以访问你的项目的默认主页。</p><p style=\"margin: 10px auto; padding: 0px;\">　　4、接下来个主要文件夹的作用：</p><p style=\"margin: 10px auto; padding: 0px;\">　　　　project--src　: 这里存放java文件</p><p style=\"margin: 10px auto; padding: 0px;\">　　　 &nbsp; project--WebRoot ：这个目录存放的是部署到tomcat 服务器上的内容，一般认为eclipse中tomcat部署的过程就是把 WebRoot 下的文件复制到tomcat下面 ，部署后的项目的文件会出现在 ...\\apache-tomcat-7.0.52\\webapps\\ &nbsp;目录下面</p><p style=\"margin: 10px auto; padding: 0px;\">　　　　project--WebRoot--WEB-INF &nbsp;: &nbsp;WEB-INF是Java的WEB应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。（百度词条:<a href=\"http://baike.baidu.com/link?url=9igC2t8u52zPrCmAd6TwF5IgCN0sr9AsK1_F_IbxAUnAzwQ0nSETRFGi7Faw8Bijngh6SVVfp9epk14To2usZ_\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">WEB-INF</a>）</p><p style=\"margin: 10px auto; padding: 0px;\">　　　　project--WebRoot--WEB-INF--class ：这里存放字节码文件（.class），其文件的结构目录对应与 project--src 下的文件结构目录。</p><p style=\"margin: 10px auto; padding: 0px;\">　　　　project--WebRoot--WEB-INF--web.xml : 这里为web项目的配置文件，描述了 servlet 和其他的应用组件配置及命名规则等等，包括配置默认主页选项。</p><p style=\"margin: 10px auto; padding: 0px;\">　　　　　　　<span style=\"margin: 0px; padding: 0px; color: rgb(36, 143, 37);\">关于项目默认主页：</span></p><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; color: rgb(36, 143, 37);\">　　　　　　　　　a) URL 的访问规则：在网址下面访问文件不带&#39;/&#39;,比如 localhost:8080/index.html , 文件夹则加&#39;/&#39;</span></p><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; color: rgb(36, 143, 37);\">　　　　　　　　 &nbsp; b) 那么为什么 当前面访问&nbsp;http://localhost:8080/testProject/ 时会跳出一个具体的访问页面呢？ 原因是web.xml 里面配置了默认主页选项：</span></p><p><br/></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">&lt;welcome-file-list&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;welcome-file&gt;index.html&lt;/welcome-file&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;welcome-file&gt;default.html&lt;/welcome-file&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;welcome-file&gt;default.htm&lt;/welcome-file&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;welcome-file&gt;default.jsp&lt;/welcome-file&gt;&lt;/welcome-file-list&gt;</pre><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration: underline; border: none !important;\"></a></span></p><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; color: rgb(43, 171, 45);\">　<span style=\"margin: 0px; padding: 0px; color: rgb(36, 143, 37);\">　　　　　　　 　　上面&lt;welcome-file-list&gt;会设置一个默认主页，当你访问网页主目录时会从列表中从上到下寻找来显示主页，找不到则报错404；</span></span></p><p style=\"margin: 10px auto; padding: 0px;\"><span style=\"margin: 0px; padding: 0px; color: rgb(36, 143, 37);\">　　　　　　　　　c) 另外，在开发过程中，如果访问链接为文件夹一个好的习惯是在末尾加上&#39;/&#39; ，如果不加听说好像会发送两次请求 （具体影响多坏我还不清楚）</span></p><p style=\"margin: 10px auto; padding: 0px;\">　　　　project--WebRoot--META-INF :&nbsp;<a href=\"http://blog.sina.com.cn/s/blog_9075354e0101kc37.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">链接跳转查看</a>　　</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><hr/><p style=\"margin: 10px auto; padding: 0px;\">文件夹作用 参考文章：<a href=\"http://blog.sina.com.cn/s/blog_7bd2dfe301012t76.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">myeclipse之web项目的部署（发布）流程</a>　</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><hr/><table align=\"center\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">版权声明</strong><br/>本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">BensonLaur</a>&nbsp; 和本文原始地址：<br/><a href=\"http://www.cnblogs.com/BensonLaur/p/5655553.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span style=\"margin: 0px; padding: 0px;\">http://www.cnblogs.com/BensonLaur/p/5655553.html</span></a></td></tr></tbody></table><p>分类:&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/category/850784.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">Web 开发</a></p><p><br/></p>', '2017-3-28 21:00:22', '2017-3-29 13:40:45', 1, 0, 0, '1', '目录：　　0、前言　　1、Tomcat的配置　　2、第一个Web 项目0、前言　　刚刚开始接触web开发，了解的也不多，在这里记录一下我的第一个web项目启动的过程。网上教程很多，使用的java IDE 好像也是各种各样，如：如2009年发表的：谈在Eclipse中配置Tomcat ，2014年发表的：如何配置Java EE Eclipse+Tomcat开发环境 等，还有很多杂七杂八的，深感后面配置越来越简单化了，而我使用的应该算是更简单的工具了。　　工具越简单化傻瓜化，背后隐藏的原理就相对更多，包装的就更深。该给简单点呢，还是复杂点好呢，就仁者见仁智者见智了。好了，废话不多说，说我的配置过程。　　环境：win7 + JDk 1.8 + apache-tomcat-7.0.52 + MyEclipse Enterprise Workbench v 2014  (点击链接 下载)　　注：JDK 的配置网上很多，这里不转述； JDK和JRE 区别 （有兴趣的可以点击 查看）1、Tomcat的配置 　　使用 MyEclipse 和 上面的 tomcat 压缩包安装非常简单。　　1）首先配置好jkd环境　　2）安装MyEclipse，过程自己解决　　3）接着将 apache-tomcat-7.0.52 解压到任意目录（不知道路径包含中文会不会出问题，建议不要含中文，以避免因字符编码不支持而重新的可能）　　4）打开MyEclipse ，找到 Window-> Preferences -> MyEclipse -> Servers -> Tomcat -> Tomcat 7.x ，在右面的面板中， “Enable” Tomcat 7.x server ,同时 点击按钮\"Browse...\" 指定刚才解压 apache-tomcat-7.0.52 的路径，（注意指定的该路径的下一个子目录是直接包含bin 和conf 等子目录的，如 bin 目录为D:\\apache-tomcat-7.0.52\\apache-tomcat-7.0.52\\bin 则指定 D:\\apache-tomcat-7.0.52\\apache-tomcat-7.0.52 而不能是D:\\apache-tomcat-7.0.52 ）　　5)点击 应用 或者 “OK” 确认后重启，就算配置好了　　6）接下来演示简单的第一个web项目的创建。注：怎么知道自己有没有配置成功呢：使用这种方法配置Tomcat只有在打开myEclipse后自己启动服务——　　a）首先打开servers 窗口视图 Window-> show view -> others -> MyEclipse java Enterprise -> servers；　　b) 然后右键 点击 servers窗口视图中的 “tomcat 7.x” 项，选择“run Server” 即可启动。 　　c) tomcat 默认部署了一个网页可供访问测试，打开自己的浏览器，或者在 选择 servers 窗口视图旁边 的 web browser ，在地址栏里输入：http://localhost:8080/访问成功就说明部署成功了　　注意：这里的端口是不一定就是确定的8080，例如说我的端口就是8888，应该是8080被别的程序占用了吧。　　　　一种查看的方法是：在 tomcat 目录下里的conf 目录，目录下有server.xml  ，在你面的<connector>标签下，port 会指定你的端口；　　　　另一种查看的方法是：查看console窗口 服务启动之后 的输出[\"http-bio-8888\"] ；2、第一个Web 项目 　　这里主要说创建一个web项目需要注意一些什么吧，具体其他知识不在这里提出。　　1、首先是创建一个 web project。　　2、创建的project 需要部署到tomcat 服务器上才能够被本地来访问，部署很简单——在server视图窗口下,右击 tomcat 7.x -> add deployment 选择你要部署的project　　3、过了一小小会自动部署完毕，这时候可在浏览器输入你的项目链接即可访问，比如项目名为 testProject 则可以输入http://localhost:8080/testProject/ 就可以访问你的项目的默认主页。　　4、接下来个主要文件夹的作用：　　　　project--src　: 这里存放java文件　　　   project--WebRoot ：这个目录存放的是部署到tomcat 服务器上的内容，一般认为eclipse中tomcat部署的过程就是把 WebRoot 下的文件复制到tomcat下面 ，部署后的项目的文件会出现在 ...\\apache-tomcat-7.0.52\\webapps\\  目录下面　　　　project--WebRoot--WEB-INF  :  WEB-INF是Java的WEB应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。（百度词条:WEB-INF）　　　　project--WebRoot--WEB-INF--class ：这里存放字节码文件（.class），其文件的结构目录对应与 project--src 下的文件结构目录。　　　　project--WebRoot--WEB-INF--web.xml : 这里为web项目的配置文件，描述了 servlet 和其他的应用组件配置及命名规则等等，包括配置默认主页选项。　　　　　　　关于项目默认主页：　　　　　　　　　a) URL 的访问规则：在网址下面访问文件不带\'/\',比如 localhost:8080/index.html , 文件夹则加\'/\'　　　　　　　　   b) 那么为什么 当前面访问 http://localhost:8080/testProject/ 时会跳出一个具体的访问页面呢？ 原因是web.xml 里面配置了默认主页选项：<welcome-file-list>    <welcome-file>index.html</welcome-file>    <welcome-file>index.htm</welcome-file>    <welcome-file>index.jsp</welcome-file>    <welcome-file>default.html</welcome-file>    <welcome-file>default.htm</welcome-file>    <welcome-file>default.jsp</welcome-file></welcome-file-list>　　　　　　　　 　　上面<welcome-file-list>会设置一个默认主页，当你访问网页主目录时会从列表中从上到下寻找来显示主页，找不到则报错404；　　　　　　　　　c) 另外，在开发过程中，如果访问链接为文件夹一个好的习惯是在末尾加上\'/\' ，如果不加听说好像会发送两次请求 （具体影响多坏我还不清楚）　　　　project--WebRoot--META-INF : 链接跳转查看　　 文件夹作用 参考文章：myeclipse之web项目的部署（发布）流程　 版权声明本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者 BensonLaur  和本文原始地址：http://www.cnblogs.com/BensonLaur/p/5655553.html分类: Web 开发', '0');
INSERT INTO `t_article` VALUES ('20170328210055rtx', '20170322154831v', 'Web —— java web 项目开发 笔记', '<p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">1、tomcat 配置虚拟路径：<a href=\"http://blog.csdn.net/hymking/article/details/25662041\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">Tomcat下配置虚拟路径管理web项目</a>&nbsp;<a href=\"http://blog.csdn.net/lawmansoft/article/details/7394331\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">发布路径配置( 即虚拟目录配置 )</a>&nbsp;&nbsp;<a href=\"http://blog.csdn.net/thinkner/article/details/4267840\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">配置虚拟路径的4种方法</a>&nbsp;&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">2、在 Eclipse Java EE IDE for Web Developers 中，默认情况下，将需要使用的Jar包放到项目环境下 的 WebContent\\WEB-INF\\lib 下，项目部署运行时，会自动将jar包部署到服务器上；</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">使用User Library 管理jar包时，IDE 默认不会帮用户将 jar包进行部署，需要手动配置，步骤：右键项目-&gt;Properties-&gt;Deployment Assembly-&gt;Add-&gt;Java Build Path Entries-&gt;选中自定义Library，finish；</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">具体图文参考<a href=\"http://www.cnblogs.com/littlecharacter/archive/2016/06/01/5549059.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">博文</a></p><p><br/></p>', '2017-3-28 21:00:55', '2017-3-29 13:40:41', 7, 0, 0, '1', '1、tomcat 配置虚拟路径：Tomcat下配置虚拟路径管理web项目 发布路径配置( 即虚拟目录配置 )  配置虚拟路径的4种方法  2、在 Eclipse Java EE IDE for Web Developers 中，默认情况下，将需要使用的Jar包放到项目环境下 的 WebContent\\WEB-INF\\lib 下，项目部署运行时，会自动将jar包部署到服务器上；使用User Library 管理jar包时，IDE 默认不会帮用户将 jar包进行部署，需要手动配置，步骤：右键项目->Properties->Deployment Assembly->Add->Java Build Path Entries->选中自定义Library，finish；具体图文参考博文', '0');
INSERT INTO `t_article` VALUES ('20170328210222bqz', '20170322154831v', 'Web —— tomcat 问题解决', '<p style=\"margin: 10px auto; padding: 0px;\">1、在Eclipse 上部署到Tomcat，使用mybatis 访问数据库，junit测试访问正常，Tomcat运行时报错：&nbsp;java.lang.NoClassDefFoundError: org/apache/ibatis/io/Resources] with root cause</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp; &nbsp; 原因：没有把ibatis核心包加入运行的classpath：/WEB-INF/lib/下</p><p style=\"margin: 10px auto; padding: 0px;\">　 解决：右击项目名-&gt;properties-&gt;Deployment Assembly（部署映射集合） ；在右边窗口点 添加-&gt;Java Build Path Entires,选择你的mybatis jar包或对应的用户库，之后点击确认或应用 即可。</p><p style=\"margin: 10px auto; padding: 0px;\">　　　　</p><p style=\"margin: 10px auto; padding: 0px;\">参考：<a href=\"http://www.iteye.com/problems/76017target%3D_blank\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">link1</a>&nbsp;&nbsp;<a href=\"http://blog.csdn.net/name_z/article/details/51454598\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">link2</a></p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><hr/><table align=\"center\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">版权声明</strong><br/>本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">BensonLaur</a>&nbsp; 和本文原始地址：<br/><a href=\"http://www.cnblogs.com/BensonLaur/p/5743435.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span style=\"margin: 0px; padding: 0px;\">http://www.cnblogs.com/BensonLaur/p/5743435.html</span></a></td></tr></tbody></table><p>分类:&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/category/850784.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">Web 开发</a></p><p><br/></p>', '2017-3-28 21:02:22', '2017-3-29 13:40:31', 14, 0, 0, '1', '1、在Eclipse 上部署到Tomcat，使用mybatis 访问数据库，junit测试访问正常，Tomcat运行时报错： java.lang.NoClassDefFoundError: org/apache/ibatis/io/Resources] with root cause    原因：没有把ibatis核心包加入运行的classpath：/WEB-INF/lib/下　 解决：右击项目名->properties->Deployment Assembly（部署映射集合） ；在右边窗口点 添加->Java Build Path Entires,选择你的mybatis jar包或对应的用户库，之后点击确认或应用 即可。　　　　参考：link1  link2 版权声明本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者 BensonLaur  和本文原始地址：http://www.cnblogs.com/BensonLaur/p/5743435.html分类: Web 开发', '0');
INSERT INTO `t_article` VALUES ('20170328210327yqw', '20170322154831v', 'Web —— 小技巧集', '<h1 class=\"postTitle\" style=\"margin: 0px; padding: 0px 100px 10px 5px; font-size: 15.6px; border-bottom: 1px solid rgb(153, 153, 153); line-height: 1.5em; clear: both; border-left: 5px solid rgb(31, 166, 230); font-family: Verdana, Arial, Helvetica, sans-serif; white-space: normal; background-color: rgb(255, 255, 255);\"><a class=\"postTitle2\" href=\"http://www.cnblogs.com/BensonLaur/p/5729319.html\" style=\"margin: 0px; padding: 0px; color: rgb(28, 119, 145); text-decoration: none;\">Web —— 小技巧集</a></h1><p style=\"margin: 10px auto; padding: 0px;\">html中<strong style=\"margin: 0px; padding: 0px;\">设置锚点定位</strong>3种方法（已知）：</p><p style=\"margin: 10px auto; padding: 0px;\">1. id 定位 &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&lt;a href=&quot;#1F&quot; name=&quot;1F&quot;&gt;锚点1&lt;/a&gt; &nbsp;&nbsp;&lt;div id=&quot;1F&quot;&gt; &lt;/div&gt;</p><p style=\"margin: 10px auto; padding: 0px;\">2. name 定位 &nbsp; &nbsp;&lt;a href=&quot;#5F&quot;&gt;锚点5&lt;/a&gt;&nbsp;&lt;div name=&quot;5F&quot;&gt; &lt;/div&gt;</p><p style=\"margin: 10px auto; padding: 0px;\">3. js 定位 &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&lt;li class=&quot;&quot; onclick=&quot;javascript:document.getElementById(&#39;here&#39;).scrollIntoView()&quot;&gt;&lt;/li&gt;&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">URI 和 URL 的区别</strong>：&nbsp;<a href=\"http://www.cnblogs.com/gaojing/archive/2012/02/04/2413626.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">link</a></p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">级联省市县：<a href=\"http://www.cnblogs.com/gg1234/p/5123561.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">link</a></p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">动态添加option：<a href=\"http://blog.sina.com.cn/s/blog_7e2d3a350101e0cv.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">link</a>&nbsp;、<a href=\"http://blog.csdn.net/lala515/article/details/6624762\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">link</a></p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">js中的单引号与双引号：&nbsp;<a href=\"http://www.jb51.net/article/42825.htm\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">link</a></p><p><br/></p><p><br/></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">&lt;html&gt;\n&lt;body&gt;\n&lt;input&nbsp;value=&quot;外双引号内双引号-错误&quot;&nbsp;type=&quot;button&quot;&nbsp;onclick=&quot;alert(&quot;OK&quot;);&quot;&nbsp;/&gt;&lt;br&nbsp;/&gt;\n&lt;input&nbsp;value=&quot;外单引号内单引号-错误&quot;&nbsp;type=&quot;button&quot;&nbsp;onclick=&#39;alert(&#39;OK&#39;);&#39;&nbsp;/&gt;&lt;br&nbsp;/&gt;\n&lt;input&nbsp;value=&quot;两个双引号-错误&quot;&nbsp;type=&quot;button&quot;&nbsp;onclick=&quot;alert(&quot;&quot;OK&quot;&quot;);&quot;&nbsp;/&gt;&lt;br&nbsp;/&gt;\n&lt;input&nbsp;value=&quot;两个单引号-错误&quot;&nbsp;type=&quot;button&quot;&nbsp;onclick=&quot;alert(&#39;&#39;OK&#39;&#39;);&quot;&nbsp;/&gt;&lt;br&nbsp;/&gt;\n&lt;input&nbsp;value=&quot;\\+双引号-错误&quot;&nbsp;type=&quot;button&quot;&nbsp;onclick=&quot;alert(\\&quot;OK\\&quot;);&quot;&nbsp;/&gt;&lt;br&nbsp;/&gt;\n&lt;input&nbsp;value=&quot;\\+单引号-错误&quot;&nbsp;type=&quot;button&quot;&nbsp;onclick=&quot;alert(\\&#39;OK\\&#39;);&quot;&nbsp;/&gt;&lt;br&nbsp;/&gt;\n&lt;input&nbsp;value=&quot;外双引号内单引号-OK&quot;&nbsp;type=&quot;button&quot;&nbsp;onclick=&quot;alert(&#39;OK&#39;);&quot;&nbsp;/&gt;&lt;br&nbsp;/&gt;\n&lt;input&nbsp;value=&quot;外单引号内双引号-OK&quot;&nbsp;type=&quot;button&quot;&nbsp;onclick=&#39;alert(&quot;OK&quot;);&#39;&nbsp;/&gt;&lt;br&nbsp;/&gt;\n&lt;input&nbsp;value=&quot;外部不使用引号-OK&quot;&nbsp;type=&quot;button&quot;&nbsp;onclick=alert(&#39;OK&#39;);alert(&quot;OK&quot;);&nbsp;/&gt;&lt;br&nbsp;/&gt;\n&lt;input&nbsp;value=&quot;HTML转义字符&quot;(&amp;&nbsp;#&nbsp;3&nbsp;4&nbsp;;)-OK&quot;&nbsp;type=&quot;button&quot;&nbsp;onclick=&quot;alert(&quot;OK&quot;);&quot;&nbsp;/&gt;&lt;br&nbsp;/&gt;\n&lt;input&nbsp;value=&quot;HTML转义字符&#39;(&amp;&nbsp;#&nbsp;3&nbsp;9&nbsp;;)-OK&quot;&nbsp;type=&quot;button&quot;&nbsp;onclick=&quot;alert(&#39;OK&#39;);&quot;&nbsp;/&gt;&lt;br&nbsp;/&gt;\n&lt;input&nbsp;value=&quot;HTML转义字符&quot;(&amp;&nbsp;#&nbsp;x&nbsp;2&nbsp;2&nbsp;;)-OK&quot;&nbsp;type=&quot;button&quot;&nbsp;onclick=&quot;alert(&#39;OK&#39;);&quot;&nbsp;/&gt;&lt;br&nbsp;/&gt;\n&lt;input&nbsp;value=&quot;HTML转义字符&#39;(&amp;&nbsp;#&nbsp;x&nbsp;2&nbsp;7&nbsp;;)-OK&quot;&nbsp;type=&quot;button&quot;&nbsp;onclick=&quot;alert(&#39;OK&#39;);&quot;&nbsp;/&gt;&lt;br&nbsp;/&gt;\n&lt;input&nbsp;value=&quot;HTML转义字符&quot;(&amp;&nbsp;q&nbsp;u&nbsp;o&nbsp;t&nbsp;;)-OK&quot;&nbsp;type=&quot;button&quot;&nbsp;onclick=&quot;alert(&quot;OK&quot;);&quot;&nbsp;/&gt;&lt;br&nbsp;/&gt;\n&lt;input&nbsp;value=&quot;HTML转义字符&#39;(&amp;&nbsp;a&nbsp;p&nbsp;o&nbsp;s&nbsp;;)-IE错误&quot;&nbsp;type=&quot;button&quot;&nbsp;onclick=&quot;alert(&#39;OK&#39;);&quot;&nbsp;/&gt;&lt;br&nbsp;/&gt;\n&lt;input&nbsp;value=&quot;其它\\\\-错误&quot;&nbsp;type=&quot;button&quot;&nbsp;onclick=&quot;alert(\\\\&quot;OK\\\\&quot;);&quot;&nbsp;/&gt;&lt;br&nbsp;/&gt;\n&lt;input&nbsp;value=&quot;其它\\&amp;&nbsp;#&nbsp;3&nbsp;4&nbsp;;-错误&quot;&nbsp;type=&quot;button&quot;&nbsp;onclick=&quot;alert(\\&quot;OK\\&quot;);&quot;&nbsp;/&gt;&lt;br&nbsp;/&gt;\n&lt;/body&gt;\n&lt;/html&gt;</pre><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration: underline; border: none !important;\"></a></span></p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p><br/></p>', '2017-3-28 21:03:27', '2017-3-29 13:40:28', 2, 0, 0, '1', 'Web —— 小技巧集html中设置锚点定位3种方法（已知）：1. id 定位         <a href=\"#1F\" name=\"1F\">锚点1</a>   <div id=\"1F\"> </div>2. name 定位    <a href=\"#5F\">锚点5</a> <div name=\"5F\"> </div>3. js 定位         <li class=\"\" onclick=\"javascript:document.getElementById(\'here\').scrollIntoView()\"></li>  URI 和 URL 的区别： link 级联省市县：link 动态添加option：link 、link js中的单引号与双引号： link<html><body><input value=\"外双引号内双引号-错误\" type=\"button\" onclick=\"alert(\"OK\");\" /><br /><input value=\"外单引号内单引号-错误\" type=\"button\" onclick=\'alert(\'OK\');\' /><br /><input value=\"两个双引号-错误\" type=\"button\" onclick=\"alert(\"\"OK\"\");\" /><br /><input value=\"两个单引号-错误\" type=\"button\" onclick=\"alert(\'\'OK\'\');\" /><br /><input value=\"\\+双引号-错误\" type=\"button\" onclick=\"alert(\\\"OK\\\");\" /><br /><input value=\"\\+单引号-错误\" type=\"button\" onclick=\"alert(\\\'OK\\\');\" /><br /><input value=\"外双引号内单引号-OK\" type=\"button\" onclick=\"alert(\'OK\');\" /><br /><input value=\"外单引号内双引号-OK\" type=\"button\" onclick=\'alert(\"OK\");\' /><br /><input value=\"外部不使用引号-OK\" type=\"button\" onclick=alert(\'OK\');alert(\"OK\"); /><br /><input value=\"HTML转义字符\"(& # 3 4 ;)-OK\" type=\"button\" onclick=\"alert(\"OK\");\" /><br /><input value=\"HTML转义字符\'(& # 3 9 ;)-OK\" type=\"button\" onclick=\"alert(\'OK\');\" /><br /><input value=\"HTML转义字符\"(& # x 2 2 ;)-OK\" type=\"button\" onclick=\"alert(\'OK\');\" /><br /><input value=\"HTML转义字符\'(& # x 2 7 ;)-OK\" type=\"button\" onclick=\"alert(\'OK\');\" /><br /><input value=\"HTML转义字符\"(& q u o t ;)-OK\" type=\"button\" onclick=\"alert(\"OK\");\" /><br /><input value=\"HTML转义字符\'(& a p o s ;)-IE错误\" type=\"button\" onclick=\"alert(\'OK\');\" /><br /><input value=\"其它\\\\-错误\" type=\"button\" onclick=\"alert(\\\\\"OK\\\\\");\" /><br /><input value=\"其它\\& # 3 4 ;-错误\" type=\"button\" onclick=\"alert(\\\"OK\\\");\" /><br /></body></html> ', '0');
INSERT INTO `t_article` VALUES ('20170328210440ltn', '20170322154831v', 'web —— jsp笔记', '<p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">cookies 的使用</strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;1、首先确保客户机上允许使用cookie，一般在浏览器的 隐私 设置项里可以设置。</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;2、下面给出具体的例子</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　a)index.jsp中如果没注册过，让游客注册，如果注册了，拿出贮存在cookie中的注册信息显示出来</p><p><br/></p><p><br/></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">&lt;%@&nbsp;page&nbsp;language=&quot;java&quot;&nbsp;contentType=&quot;text/html;&nbsp;charset=GB18030&quot;\n&nbsp;&nbsp;&nbsp;&nbsp;pageEncoding=&quot;utf8&quot;%&gt;\n&lt;%@page&nbsp;import=&quot;java.util.Date&quot;&nbsp;%&gt;\n&lt;%@page&nbsp;import=&quot;java.text.SimpleDateFormat&quot;&nbsp;%&gt;\n&lt;%@&nbsp;page&nbsp;import=&quot;java.net.URLDecoder&quot;&nbsp;%&gt;\n&lt;!DOCTYPE&nbsp;html&nbsp;PUBLIC&nbsp;&quot;-//W3C//DTD&nbsp;HTML&nbsp;4.01&nbsp;Transitional//EN&quot;&nbsp;&quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta&nbsp;http-equiv=&quot;Content-Type&quot;&nbsp;content=&quot;text/html;&nbsp;charset=utf8&quot;&gt;\n\n&lt;title&gt;First&nbsp;Jsp/&nbsp;show&nbsp;system&nbsp;time&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&nbsp;onload=&quot;setInterval(updateTime(),&nbsp;1000)&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;%!\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SimpleDateFormat&nbsp;df&nbsp;=&nbsp;new&nbsp;SimpleDateFormat(&quot;yyyy-MM-dd&nbsp;hh:mm:ss&quot;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;updateTime(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Date&nbsp;date&nbsp;=&nbsp;new&nbsp;Date();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;df.format(date);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;当前时间：&lt;%=&nbsp;updateTime()&nbsp;%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;br/&gt;&lt;br/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;%&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Cookie[]&nbsp;cookies&nbsp;=&nbsp;request.getCookies();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;user=&quot;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;date=&quot;&quot;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;date2=&quot;&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(cookies&nbsp;!=&nbsp;null)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int&nbsp;i=0;i&lt;cookies.length;i++)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(cookies[i].getName().equals(&quot;mrCookie&quot;))\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;user&nbsp;=&nbsp;URLDecoder.decode(cookies[i].getValue().split(&quot;#&quot;)[0],&nbsp;&quot;gbk&quot;)&nbsp;;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;date&nbsp;=&nbsp;cookies[i].getValue().split(&quot;#&quot;)[1];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;date2&nbsp;=&nbsp;cookies[i].getValue().split(&quot;#&quot;)[2];\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(&quot;&quot;.equals(user)&amp;&amp;&nbsp;&quot;&quot;.equals(date)){&nbsp;&nbsp;&nbsp;&nbsp;%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;游客，你好，欢迎光临！&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;form&nbsp;action&nbsp;=&nbsp;&quot;deal.jsp&quot;&nbsp;method&nbsp;=&nbsp;&quot;post&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;请输入姓名：&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;user&quot;/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&nbsp;&quot;submit&quot;&nbsp;value=&quot;确认&quot;&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/form&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;%\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{&nbsp;&nbsp;&nbsp;&nbsp;%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;欢迎，[&lt;b&gt;&lt;%=&nbsp;user&nbsp;%&gt;&lt;/b&gt;]&nbsp;再次光临！&lt;br/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;您的注册时间为：&lt;%=&nbsp;date&nbsp;%&gt;&lt;br/&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cookies有效期至：&lt;%=&nbsp;date2&nbsp;%&gt;\n&nbsp;&nbsp;&nbsp;&nbsp;&lt;%&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;%&gt;\n&lt;/body&gt;&nbsp;&nbsp;\n&lt;/html&gt;</pre><p><br/></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　b)deal.jsp 写入cookies 信息</p><p>&nbsp;<span class=\"cnblogs_code_collapse\" style=\"margin: 0px; padding: 2px; border-width: 1px; border-style: solid; border-color: gray; background-color: rgb(255, 255, 255); line-height: 1.5 !important;\">dea.jsp</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;【注】1、deal.jsp 中的&nbsp;request.setCharacterEncoding(&quot;GB18030&quot;); 编码设置应该与index.jsp中的第一行的&nbsp;@page charset=GB18030&quot; 一致</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　　 2、Decode 和 encode 应该使用同种或兼容的编码（gbk?gb18030? 好像兼容？）</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">解决中文乱码（jsp内置的request传递参数包含中文时）</strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">方法有两个：</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">1、&lt;% request.setCharacterEncoding(&quot;utf8&quot;); %&gt; //在request指明发出请求页的编码</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">2、<span style=\"margin: 0px; padding: 0px; line-height: 1.5;\">new String(request.getParameter(&quot;name&quot;).getBytes(&quot;ISO-8859-1&quot;), &quot;utf8&quot;); //对于每一个request字段，使用String的新编码构造函数，指定目标编码；</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p><br/></p>', '2017-3-28 21:04:40', '2017-3-29 13:40:23', 7, 1, 0, '1', 'cookies 的使用 1、首先确保客户机上允许使用cookie，一般在浏览器的 隐私 设置项里可以设置。 2、下面给出具体的例子　　a)index.jsp中如果没注册过，让游客注册，如果注册了，拿出贮存在cookie中的注册信息显示出来<%@ page language=\"java\" contentType=\"text/html; charset=GB18030\"    pageEncoding=\"utf8\"%><%@page import=\"java.util.Date\" %><%@page import=\"java.text.SimpleDateFormat\" %><%@ page import=\"java.net.URLDecoder\" %><!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"><html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf8\"><title>First Jsp/ show system time</title></head><body onload=\"setInterval(updateTime(), 1000)\">    <%!        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd hh:mm:ss\");        String updateTime(){            Date date = new Date();         return  df.format(date);        }            %>    当前时间：<%= updateTime() %>    <br/><br/>    <%         Cookie[] cookies = request.getCookies();        String user=\"\";        String date=\"\";        String date2=\"\";        if(cookies != null)        {            for(int i=0;i<cookies.length;i++)            {                if(cookies[i].getName().equals(\"mrCookie\"))                {                    user = URLDecoder.decode(cookies[i].getValue().split(\"#\")[0], \"gbk\") ;                    date = cookies[i].getValue().split(\"#\")[1];                    date2 = cookies[i].getValue().split(\"#\")[2];                }            }        }        if(\"\".equals(user)&& \"\".equals(date)){    %>            游客，你好，欢迎光临！            <form action = \"deal.jsp\" method = \"post\">                请输入姓名：<input type=\"text\" name=\"user\"/>                <input type= \"submit\" value=\"确认\">            </form>    <%        }else{    %>            欢迎，[<b><%= user %></b>] 再次光临！<br/>            您的注册时间为：<%= date %><br/>            cookies有效期至：<%= date2 %>    <%         }    %></body>  </html>　　b)deal.jsp 写入cookies 信息 dea.jsp 【注】1、deal.jsp 中的 request.setCharacterEncoding(\"GB18030\"); 编码设置应该与index.jsp中的第一行的 @page charset=GB18030\" 一致　　　 2、Decode 和 encode 应该使用同种或兼容的编码（gbk?gb18030? 好像兼容？） 解决中文乱码（jsp内置的request传递参数包含中文时）方法有两个：1、<% request.setCharacterEncoding(\"utf8\"); %> //在request指明发出请求页的编码2、new String(request.getParameter(\"name\").getBytes(\"ISO-8859-1\"), \"utf8\"); //对于每一个request字段，使用String的新编码构造函数，指定目标编码； ', '0');
INSERT INTO `t_article` VALUES ('20170328210558vad', '20170322225547o', 'C++ —— 类模板的分离式编译', '<table><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding-right: 12px; padding-left: 12px; border-color: silver; border-collapse: collapse; font-size: 22px; background: rgb(232, 232, 232); color: rgb(153, 153, 153);\" width=\"25\">目录</td><td style=\"margin: 0px; padding: 3px 20px 3px 3px; border-color: silver; border-collapse: collapse; font-size: 14px;\"><ol style=\"padding: 0px 0px 0px 40px;\" class=\" list-paddingleft-2\"><li><p><a href=\"http://www.cnblogs.com/BensonLaur/p/4322203.html#title1_1\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">对于C++中类模板的分离式编译的认识</a></p></li><li><p><a href=\"http://www.cnblogs.com/BensonLaur/p/4322203.html#title1_2\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">具体的实例</a></p></li></ol></td></tr></tbody></table><p><strong style=\"margin: 0px; padding: 0px;\">1、对于C++中类模板的分离式编译的认识</strong></p><p><strong style=\"margin: 0px; padding: 0px;\">为什么C++编译器不能支持对模板的分离式编译（博文链接）</strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">主要内容：编译器编译的<span style=\"margin: 0px; padding: 0px; text-decoration: underline;\">一般工作原理、对模版的分离式编译的特殊性（<span style=\"margin: 0px; padding: 0px;\">模版的特殊性）</span></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">链接：　　<a href=\"http://blog.csdn.net/pongba/article/details/19130\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">http://blog.csdn.net/pongba/article/details/19130</a></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p><strong style=\"margin: 0px; padding: 0px;\">模版编译的特殊性</strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　对程序进行编译时，对于函数调用，<span style=\"margin: 0px; padding: 0px; text-decoration: underline;\">编译器只要求函数的原型在调用点是可见的，至于函数的定义是否存在不做检查（在对程序进行链接时才检查函数的定义）。类似的，对于对象声明，编译器只要求所属的类定义在声明点是可见的，至于各成员函数的定义是否存在则不进行检查。因此，为了提高程序的可读性和可维护性，我们通常将函数原型和类定义放在头文件（.h文件）中，而函数定义（包括类成员函数的定义）则放在源文件（.cpp文件，又称实现文件）中。</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　但是，<span style=\"margin: 0px; padding: 0px; text-decoration: underline;\">模版编译则有所不同。从本质上说，模版并不是代码，而是指导编译器生成代码的指令，模版实例才是真正的程序代码。编译器看到模版定义的时候，不会立刻产生代码，只有在看到模版的使用（如调用函数模版、使用类模版定义对象或通过对象调用类模板的成员函数）时，才会进行实例化，使用特定的模版实例代码。而<strong style=\"margin: 0px; padding: 0px;\"><span style=\"margin: 0px; padding: 0px;\">为了成功地进行实例化，编译器必须能够使用相应的函数定义</span></strong>，因此，模版编译要求模版的定义和实现采用特别的文件组织方式。</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　C++语言中定义了两种编译模式：<strong style=\"margin: 0px; padding: 0px;\">包含编译模式</strong>（inclusion compilation model）和<strong style=\"margin: 0px; padding: 0px;\">&nbsp;分离编译模式</strong>（separate compilation model）。</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　<em style=\"margin: 0px; padding: 0px;\">......</em></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　　　——摘自《<em style=\"margin: 0px; padding: 0px;\">C++语言程序设计</em>》（蒋爱军、刘红梅、王勇、梁小萍编著）P349&nbsp;<em style=\"margin: 0px; padding: 0px;\">13.3.3 模版编译与类模板的实现</em></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><em style=\"margin: 0px; padding: 0px;\">　　......</em></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\"><em style=\"margin: 0px; padding: 0px;\">　　</em>提示：分离编译模式实现起来比较困难，因此，所有的C++编译器<span style=\"margin: 0px; padding: 0px; text-decoration: underline;\">都支持包含编译模式，而只有<span style=\"margin: 0px; padding: 0px;\">某些C++编译器支持分离编模式。程序员在编译使用自定义的模版的程序时，需要查阅编译器的用户指南，以确定自己所用的编译器支持那种编译模式。</span></span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　　　——摘自《<em style=\"margin: 0px; padding: 0px;\">C++语言程序设计</em>》（蒋爱军、刘红梅、王勇、梁小萍编著）P352&nbsp;<em style=\"margin: 0px; padding: 0px;\">13.3.3 分离编译模式</em></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><hr/><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p><strong style=\"margin: 0px; padding: 0px;\">2、具体的实例</strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　在此演示<strong style=\"margin: 0px; padding: 0px;\">一般的编译</strong>实例，和对于 函数或类<strong style=\"margin: 0px; padding: 0px;\">模版的编译</strong>实例。</p><p><strong style=\"margin: 0px; padding: 0px;\">（1）一般的编译</strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　 以自定义类date为例，首先创建一个Console Application project工程文件（选用C++实现），向其中添加&nbsp; date.h 和 date.cpp 两个文件，其中，date.h 存放 类的声明，而 date.cpp 对 date.h 中声明的类中的函数做具体的函数定义（函数实现）。</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　①date.h仅需要存放对类的声明就好。</p><p>&nbsp;<span class=\"cnblogs_code_collapse\" style=\"margin: 0px; padding: 2px; border-width: 1px; border-style: solid; border-color: gray; background-color: rgb(255, 255, 255); line-height: 1.5 !important;\">View Code</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　②date.cpp 需要 include&quot;date.h&quot; 然后再对 date.h 中声明的类中的函数做具体的函数定义。（注意：<span style=\"margin: 0px; padding: 0px; text-decoration: underline;\">实现文件包含头文件）</span></p><p>&nbsp;<span class=\"cnblogs_code_collapse\" style=\"margin: 0px; padding: 2px; border-width: 1px; border-style: solid; border-color: gray; background-color: rgb(255, 255, 255); line-height: 1.5 !important;\">View Code</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　③以创建project后自动生成的main.cpp 中的 main() 作为程序执行入口，使用date的派生类Ndate 的实例化对象。需要 include&quot;date.h&quot;。</p><p>&nbsp;<span class=\"cnblogs_code_collapse\" style=\"margin: 0px; padding: 2px; border-width: 1px; border-style: solid; border-color: gray; background-color: rgb(255, 255, 255); line-height: 1.5 !important;\">View Code</span></p><p><strong style=\"margin: 0px; padding: 0px;\">（2）对于 函数或类 模板的编译</strong></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　以定义函数模版M_swap为例（交换两个实参的值），首先创建一个Console Application project工程文件（选用C++实现），向其中添加 M_swap.h 和 M_swap.cpp 两个文件，其中，M_swap.h 存放 函数模版或类模版成员函数 的声明，而 M_swap.cpp 对 M_swap.h 中声明的 函数模版或类模版成员函数 做具体的定义（实现）。</p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　①在M_swap.h存放对 函数模版或类模板成员函数 的声明及定义，或给出声明后用预处理指令#include包含实现文件。（注意：<span style=\"margin: 0px; padding: 0px; text-decoration: underline;\">头文件中给出声明和定义 或&nbsp;&nbsp;<span style=\"margin: 0px; padding: 0px;\">头文件包含实现文件）</span></span></p><p>&nbsp;<span class=\"cnblogs_code_collapse\" style=\"margin: 0px; padding: 2px; border-width: 1px; border-style: solid; border-color: gray; background-color: rgb(255, 255, 255); line-height: 1.5 !important;\">View Code</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　②M_swap.cpp 直接给出 声明的 函数模版或类模版成员函数 做具体的函数定义。</p><p>&nbsp;<span class=\"cnblogs_code_collapse\" style=\"margin: 0px; padding: 2px; border-width: 1px; border-style: solid; border-color: gray; background-color: rgb(255, 255, 255); line-height: 1.5 !important;\">View Code</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">　　③以创建project后自动生成的main.cpp 中的 main() 作为程序执行入口。实例化M_swap，需要 include&quot;M_swap.h&quot;。</p><p>&nbsp;<span class=\"cnblogs_code_collapse\" style=\"margin: 0px; padding: 2px; border-width: 1px; border-style: solid; border-color: gray; background-color: rgb(255, 255, 255); line-height: 1.5 !important;\">View Code</span></p><p style=\"margin: 10px auto; padding: 0px; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 12px; white-space: normal; background-color: rgb(255, 255, 255);\">&nbsp;</p><p><br/></p>', '2017-3-28 21:05:58', '2017-3-29 13:42:13', 3, 0, 0, '1', '目录对于C++中类模板的分离式编译的认识具体的实例1、对于C++中类模板的分离式编译的认识为什么C++编译器不能支持对模板的分离式编译（博文链接）主要内容：编译器编译的一般工作原理、对模版的分离式编译的特殊性（模版的特殊性）链接：　　http://blog.csdn.net/pongba/article/details/19130 模版编译的特殊性　　对程序进行编译时，对于函数调用，编译器只要求函数的原型在调用点是可见的，至于函数的定义是否存在不做检查（在对程序进行链接时才检查函数的定义）。类似的，对于对象声明，编译器只要求所属的类定义在声明点是可见的，至于各成员函数的定义是否存在则不进行检查。因此，为了提高程序的可读性和可维护性，我们通常将函数原型和类定义放在头文件（.h文件）中，而函数定义（包括类成员函数的定义）则放在源文件（.cpp文件，又称实现文件）中。　　但是，模版编译则有所不同。从本质上说，模版并不是代码，而是指导编译器生成代码的指令，模版实例才是真正的程序代码。编译器看到模版定义的时候，不会立刻产生代码，只有在看到模版的使用（如调用函数模版、使用类模版定义对象或通过对象调用类模板的成员函数）时，才会进行实例化，使用特定的模版实例代码。而为了成功地进行实例化，编译器必须能够使用相应的函数定义，因此，模版编译要求模版的定义和实现采用特别的文件组织方式。　　C++语言中定义了两种编译模式：包含编译模式（inclusion compilation model）和 分离编译模式（separate compilation model）。　　......　　　　——摘自《C++语言程序设计》（蒋爱军、刘红梅、王勇、梁小萍编著）P349 13.3.3 模版编译与类模板的实现　　......　　提示：分离编译模式实现起来比较困难，因此，所有的C++编译器都支持包含编译模式，而只有某些C++编译器支持分离编模式。程序员在编译使用自定义的模版的程序时，需要查阅编译器的用户指南，以确定自己所用的编译器支持那种编译模式。　　　　——摘自《C++语言程序设计》（蒋爱军、刘红梅、王勇、梁小萍编著）P352 13.3.3 分离编译模式  2、具体的实例　　在此演示一般的编译实例，和对于 函数或类模版的编译实例。（1）一般的编译　　 以自定义类date为例，首先创建一个Console Application project工程文件（选用C++实现），向其中添加  date.h 和 date.cpp 两个文件，其中，date.h 存放 类的声明，而 date.cpp 对 date.h 中声明的类中的函数做具体的函数定义（函数实现）。　　①date.h仅需要存放对类的声明就好。 View Code　　②date.cpp 需要 include\"date.h\" 然后再对 date.h 中声明的类中的函数做具体的函数定义。（注意：实现文件包含头文件） View Code　　③以创建project后自动生成的main.cpp 中的 main() 作为程序执行入口，使用date的派生类Ndate 的实例化对象。需要 include\"date.h\"。 View Code（2）对于 函数或类 模板的编译　　以定义函数模版M_swap为例（交换两个实参的值），首先创建一个Console Application project工程文件（选用C++实现），向其中添加 M_swap.h 和 M_swap.cpp 两个文件，其中，M_swap.h 存放 函数模版或类模版成员函数 的声明，而 M_swap.cpp 对 M_swap.h 中声明的 函数模版或类模版成员函数 做具体的定义（实现）。　　①在M_swap.h存放对 函数模版或类模板成员函数 的声明及定义，或给出声明后用预处理指令#include包含实现文件。（注意：头文件中给出声明和定义 或  头文件包含实现文件） View Code　　②M_swap.cpp 直接给出 声明的 函数模版或类模版成员函数 做具体的函数定义。 View Code　　③以创建project后自动生成的main.cpp 中的 main() 作为程序执行入口。实例化M_swap，需要 include\"M_swap.h\"。 View Code ', '0');
INSERT INTO `t_article` VALUES ('20170328210710pws', '20170322225547o', 'C++ —— 类的基础', '<p style=\"margin: 10px auto; padding: 0px;\">C++类的设计与基础 &nbsp; &nbsp; &nbsp; 2015.9.11</p><p style=\"margin: 10px auto; padding: 0px;\">1、变量和常量的命名：确定程序中的变量、常量、函数的名字都是具有描述性的名字，具有直接的意义。如numberOfStudent 比 numOfStuds好。</p><p style=\"margin: 10px auto; padding: 0px;\">2、类名：当自定义一个类时，应该将类名中的每一个单词的首字母大写。例如Circle、Rectangle等都是好的类名。C++库中的类名都是小写形式。这样易于区分这两种不同的类。对象的命名可参照变量。</p><p style=\"margin: 10px auto; padding: 0px;\">3、Circle circle1() 是错误的。正确如下：</p><p style=\"margin: 10px auto; padding: 0px;\">　　Circle circle1;</p><p style=\"margin: 10px auto; padding: 0px;\">　　Circle cirlce2(3);</p><p style=\"margin: 10px auto; padding: 0px;\">4、circle1 = Circle(); //这句 使用无参构造函数创建一个对象，然后浅复制给circle1. &nbsp; &nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">5、匿名对象：对象只使用一次可以用匿名对象，如 circle().getArea 、circle(3).getArea.</p><p style=\"margin: 10px auto; padding: 0px;\">6、C++库中的 string 类常用方法：【深入学习string：<a href=\"http://www.cnblogs.com/aduck/articles/2246168.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">http://www.cnblogs.com/aduck/articles/2246168.html</a>】</p><p>&nbsp;<span class=\"cnblogs_code_collapse\" style=\"margin: 0px; padding: 2px; border-width: 1px; border-style: solid; border-color: gray; background-color: rgb(255, 255, 255); line-height: 1.5 !important;\">string 类的成员函数</span></p><p style=\"margin: 10px auto; padding: 0px;\">7、对象数组的创建：</p><p>&nbsp;<span class=\"cnblogs_code_collapse\" style=\"margin: 0px; padding: 2px; border-width: 1px; border-style: solid; border-color: gray; background-color: rgb(255, 255, 255); line-height: 1.5 !important;\">在函数栈中分配对象数组</span></p><p style=\"margin: 10px auto; padding: 0px;\">函数传递时：void printCircleArray(Circle circleArray[] , int size);</p><p>&nbsp;<span class=\"cnblogs_code_collapse\" style=\"margin: 0px; padding: 2px; border-width: 1px; border-style: solid; border-color: gray; background-color: rgb(255, 255, 255); line-height: 1.5 !important;\">在堆中分配对象数组</span></p><p style=\"margin: 10px auto; padding: 0px;\">8、构造函数初始化列表：</p><p style=\"margin: 10px auto; padding: 0px;\">　　ClassName(parameterList)</p><p style=\"margin: 10px auto; padding: 0px;\">　　: dataField1(value1),dataField2(value2)</p><p style=\"margin: 10px auto; padding: 0px;\">　　{//Additional statement is needed}</p><p style=\"margin: 10px auto; padding: 0px;\">　　当类的某个为对象成员所属类只有一个有参构造函数，编译时会因为找不到defaut构造函数而出错，此时必须使用构造函数初始化列表。</p><p style=\"margin: 10px auto; padding: 0px;\">9、</p><hr/><table align=\"center\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">版权声明</strong><br/>本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">BensonLaur</a>&nbsp; 和本文原始地址：<br/><a href=\"http://www.cnblogs.com/BensonLaur/p/5234551.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span style=\"margin: 0px; padding: 0px;\">http://www.cnblogs.com/BensonLaur/p/5234551.html</span></a></td></tr></tbody></table><p>分类:&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/category/664224.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">C++</a></p><p><br/></p>', '2017-3-28 21:07:10', '2017-3-29 13:42:06', 1, 0, 0, '1', 'C++类的设计与基础       2015.9.111、变量和常量的命名：确定程序中的变量、常量、函数的名字都是具有描述性的名字，具有直接的意义。如numberOfStudent 比 numOfStuds好。2、类名：当自定义一个类时，应该将类名中的每一个单词的首字母大写。例如Circle、Rectangle等都是好的类名。C++库中的类名都是小写形式。这样易于区分这两种不同的类。对象的命名可参照变量。3、Circle circle1() 是错误的。正确如下：　　Circle circle1;　　Circle cirlce2(3);4、circle1 = Circle(); //这句 使用无参构造函数创建一个对象，然后浅复制给circle1.    5、匿名对象：对象只使用一次可以用匿名对象，如 circle().getArea 、circle(3).getArea.6、C++库中的 string 类常用方法：【深入学习string：http://www.cnblogs.com/aduck/articles/2246168.html】 string 类的成员函数7、对象数组的创建： 在函数栈中分配对象数组函数传递时：void printCircleArray(Circle circleArray[] , int size); 在堆中分配对象数组8、构造函数初始化列表：　　ClassName(parameterList)　　: dataField1(value1),dataField2(value2)　　{//Additional statement is needed}　　当类的某个为对象成员所属类只有一个有参构造函数，编译时会因为找不到defaut构造函数而出错，此时必须使用构造函数初始化列表。9、版权声明本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者 BensonLaur  和本文原始地址：http://www.cnblogs.com/BensonLaur/p/5234551.html分类: C++', '0');
INSERT INTO `t_article` VALUES ('20170328210800hzx', '20170322225547o', 'C++ —— 非常量引用不能指向临时对象', '<table><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding-right: 12px; padding-left: 12px; border-color: silver; border-collapse: collapse; font-size: 22px; background: rgb(232, 232, 232); color: rgb(153, 153, 153);\" width=\"25\">目录</td><td style=\"margin: 0px; padding: 3px 20px 3px 3px; border-color: silver; border-collapse: collapse; font-size: 14px;\"><ol style=\"padding: 0px 0px 0px 40px;\" class=\" list-paddingleft-2\"><li><p><a href=\"http://www.cnblogs.com/BensonLaur/p/5234555.html#title1_1\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">举例</a></p></li><li><p><a href=\"http://www.cnblogs.com/BensonLaur/p/5234555.html#title1_2\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">分析</a></p></li><li><p><a href=\"http://www.cnblogs.com/BensonLaur/p/5234555.html#title1_2\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">解决</a></p></li></ol></td></tr></tbody></table><p><strong style=\"margin: 0px; padding: 0px;\">1、举例</strong></p><p style=\"margin: 10px auto; padding: 0px;\">非常量引用 指向 临时对象 —— 即：将 临时对象 传递给 非常量引用类型。</p><p style=\"margin: 10px auto; padding: 0px;\">如以下情况就会出现：</p><p style=\"margin: 10px auto; padding: 0px;\">实现实数Rational类，实数可以使用+号相加，运算的结果要可以使用 &quot;cout &lt;&lt; &quot; 以分数形式输出 实数Rational 的值：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">&nbsp;&nbsp;&nbsp;&nbsp;Rational&nbsp;a(4,5);\n&nbsp;&nbsp;&nbsp;&nbsp;Rational&nbsp;b(1,3);\n&nbsp;&nbsp;&nbsp;&nbsp;cout&nbsp;&lt;&lt;&nbsp;a+b&nbsp;&lt;&lt;&nbsp;endl;</pre><p style=\"margin: 10px auto; padding: 0px;\">在这里需要重载2个操作符函数：“+”号 和 &nbsp;“&lt;&lt;” 输出符号</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">//在Rational类中定义如下friend&nbsp;ostream&nbsp;&amp;operator&lt;&lt;&nbsp;(ostream&amp;&nbsp;outs,Rational&nbsp;&amp;rational);\nRational&nbsp;operator+(Rational&nbsp;&amp;secondRational);</pre><p style=\"margin: 10px auto; padding: 0px;\">在这种定义下，就会出现我们所要说的问题：非常量引用不能指向临时对象。</p><p style=\"margin: 10px auto; padding: 0px;\">a+b 函数返回一个Rational类的临时对象；而 &lt;&lt; 操作函数的参数却是 Rational &amp; rational 。这种情况函数会报错如下：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">&nbsp;&nbsp;&nbsp;&nbsp;no&nbsp;match&nbsp;for&nbsp;&#39;operator&lt;&lt;&#39;&nbsp;in&nbsp;&#39;std::cout&nbsp;&lt;&lt;&nbsp;a.Rational::operator+(((Rational&amp;)(&amp;&nbsp;b)))&#39;</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;虽然定义了 operator&lt;&lt; 。但是编译器对 a+b 返回的临时对象不买单，直接报了个“没有匹配的函数” 的错误。</p><p><strong style=\"margin: 0px; padding: 0px;\">2、分析</strong></p><p style=\"margin: 10px auto; padding: 0px;\">以C++的语义来说，如果一个程序员只想传递参数给函数，而不希望函数修改传入的参数时，那么，或者使用值传递，或者采用常量型引用。考虑到大对象复制时产生的开销，一般使用常量型引用const &amp;。如果函数的参数是某个类型的一个非常量的引用，那就相当于告诉编译器，程序员希望得到函数对参数的修改结果。<br/>临时变量是由编译器生成的，C++语言规范没规定编译器生成临时变量的规则，程序员无法得知由编译器生成的临时变量的名字，程序员无法访问那个临时变量。这意味着，以引用的方式传递一个临时变量做为函数参数，如果函数内部对此临时变量做了修改，那么函数返回后，程序员无法获得函数对临时变量的修改。函数对临时变量所做出的所有更改，都将丢失。<br/>一方面，在函数申明中，使用非常量型的引用告诉编译器你需要得到函数对某个对象的修改结果，可是你自己又不给变量起名字，直接丢弃了函数的修改结果，编译器只能说：“大哥，你这是干啥呢，告诉我把结果给你，等我把结果给你了，你又直接给扔了，你这不是在玩我吗？”</p><p style=\"margin: 10px auto; padding: 0px;\">同时，C++的标准&nbsp;为了防止给常量或临时变量（只有瞬间的生命周期）赋值(易产生bug)，只许使用const引用之。</p><p><strong style=\"margin: 0px; padding: 0px;\">3、解决</strong></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">friend&nbsp;ostream&nbsp;&amp;operator&lt;&lt;&nbsp;(ostream&amp;&nbsp;outs,Rational&nbsp;&amp;rational);&nbsp;&nbsp;//非常量引用</pre><p style=\"margin: 10px auto; padding: 0px;\">改为值传递：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">ostream&nbsp;&amp;operator&lt;&lt;(ostream&nbsp;&amp;outs,&nbsp;Rational&nbsp;ratiaonl)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//值传递</pre><p style=\"margin: 10px auto; padding: 0px;\">改为常量引用：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">ostream&nbsp;&amp;operator&lt;&lt;(ostream&nbsp;&amp;outs,const&nbsp;Rational&nbsp;&amp;rational)&nbsp;//常量引用</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><hr/><table align=\"center\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">版权声明</strong><br/>本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">BensonLaur</a>&nbsp; 和本文原始地址：<br/><a href=\"http://www.cnblogs.com/BensonLaur/p/5234555.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span style=\"margin: 0px; padding: 0px;\">http://www.cnblogs.com/BensonLaur/p/5234555.html</span></a></td></tr></tbody></table><p>分类:&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/category/664224.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">C++</a></p><p><br/></p>', '2017-3-28 21:08:00', '2017-3-29 13:42:00', 1, 0, 0, '1', '目录举例分析解决1、举例非常量引用 指向 临时对象 —— 即：将 临时对象 传递给 非常量引用类型。如以下情况就会出现：实现实数Rational类，实数可以使用+号相加，运算的结果要可以使用 \"cout << \" 以分数形式输出 实数Rational 的值：    Rational a(4,5);    Rational b(1,3);    cout << a+b << endl;在这里需要重载2个操作符函数：“+”号 和  “<<” 输出符号//在Rational类中定义如下friend ostream &operator<< (ostream& outs,Rational &rational);Rational operator+(Rational &secondRational);在这种定义下，就会出现我们所要说的问题：非常量引用不能指向临时对象。a+b 函数返回一个Rational类的临时对象；而 << 操作函数的参数却是 Rational & rational 。这种情况函数会报错如下：    no match for \'operator<<\' in \'std::cout << a.Rational::operator+(((Rational&)(& b)))\' 虽然定义了 operator<< 。但是编译器对 a+b 返回的临时对象不买单，直接报了个“没有匹配的函数” 的错误。2、分析以C++的语义来说，如果一个程序员只想传递参数给函数，而不希望函数修改传入的参数时，那么，或者使用值传递，或者采用常量型引用。考虑到大对象复制时产生的开销，一般使用常量型引用const &。如果函数的参数是某个类型的一个非常量的引用，那就相当于告诉编译器，程序员希望得到函数对参数的修改结果。临时变量是由编译器生成的，C++语言规范没规定编译器生成临时变量的规则，程序员无法得知由编译器生成的临时变量的名字，程序员无法访问那个临时变量。这意味着，以引用的方式传递一个临时变量做为函数参数，如果函数内部对此临时变量做了修改，那么函数返回后，程序员无法获得函数对临时变量的修改。函数对临时变量所做出的所有更改，都将丢失。一方面，在函数申明中，使用非常量型的引用告诉编译器你需要得到函数对某个对象的修改结果，可是你自己又不给变量起名字，直接丢弃了函数的修改结果，编译器只能说：“大哥，你这是干啥呢，告诉我把结果给你，等我把结果给你了，你又直接给扔了，你这不是在玩我吗？”同时，C++的标准 为了防止给常量或临时变量（只有瞬间的生命周期）赋值(易产生bug)，只许使用const引用之。3、解决friend ostream &operator<< (ostream& outs,Rational &rational);  //非常量引用改为值传递：ostream &operator<<(ostream &outs, Rational ratiaonl)       //值传递改为常量引用：ostream &operator<<(ostream &outs,const Rational &rational) //常量引用 版权声明本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者 BensonLaur  和本文原始地址：http://www.cnblogs.com/BensonLaur/p/5234555.html分类: C++', '0');
INSERT INTO `t_article` VALUES ('20170328210831ddl', '20170322225547o', 'C++ —— 笔记汇总', '<p style=\"margin: 10px auto;padding: 0px\">1、块域 &nbsp; &nbsp; 2、static 作用域 &nbsp;&nbsp; &nbsp;3、RAII &nbsp; &nbsp; &nbsp; 4、const char * 组合使用 &nbsp; &nbsp; &nbsp; &nbsp;5、C++命名规范（一般原则、匈牙利命名法、某公司应用实例） &nbsp; &nbsp; &nbsp; &nbsp;6、重载overload、重写override、重定义redifining 的差别 &nbsp; &nbsp; &nbsp;7、初始化列表作用 &nbsp;&nbsp;8、格式化输入输出 &nbsp; 9、template 中的class 和 typename &nbsp; &nbsp; &nbsp; &nbsp;10、cin &nbsp; 11、强制类型转换 &nbsp; 12、常见容器</p><hr/><p style=\"margin: 10px auto;padding: 0px\">0、<a href=\"http://c.biancheng.net/cpp/biancheng/cpp/rumen_8/\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">c++教程</a></p><p style=\"margin: 10px auto;padding: 0px\">1、C++中的<strong style=\";padding: 0px\">块域{}</strong></p><p style=\"margin: 10px auto;padding: 0px\">2、static变量 及&nbsp;<a href=\"http://blog.csdn.net/liuqiaoyu080512/article/details/8455707\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">作用域控制</a></p><p style=\"margin: 10px auto;padding: 0px\">3、C++资源管理的利器——<strong style=\";padding: 0px\">RAII惯用法</strong>（“<strong style=\";padding: 0px\"><span style=\";padding: 0px\">R</span></strong><span style=\";padding: 0px\">esource&nbsp;<strong style=\";padding: 0px\">A</strong>cquisition&nbsp;<strong style=\";padding: 0px\">I</strong>s&nbsp;<strong style=\";padding: 0px\">I</strong>nitialization”）</span></p><p style=\"margin: 10px auto;padding: 0px\">&nbsp; &nbsp; &nbsp; 链接：<a href=\"http://www.cnblogs.com/hsinwang/articles/214663.html\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">http://www.cnblogs.com/hsinwang/articles/214663.html</a></p><p style=\"margin: 10px auto;padding: 0px\">&nbsp; &nbsp; &nbsp;&nbsp;<span style=\";padding: 0px\"><a href=\"http://blog.csdn.net/vsooda/article/details/8992446\" style=\";padding: 0px;color: rgb(0, 0, 0)\">全面介绍Windows内存管理机制及C++内存分配实例</a></span></p><p style=\"margin: 10px auto;padding: 0px\">4、char* 与 char[] 的差别 +&nbsp;<strong style=\";padding: 0px\">const-char-*</strong>&nbsp;的理解</p><p style=\"margin: 10px auto;padding: 0px\">&nbsp; &nbsp; &nbsp; &nbsp;链接：<a href=\"http://blog.csdn.net/zhuzhihai1988/article/details/7726132\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">http://blog.csdn.net/zhuzhihai1988/article/details/7726132</a></p><p style=\"margin: 10px auto;padding: 0px\">5、<strong style=\";padding: 0px\">C++命名规则：&nbsp;</strong><a href=\"http://blog.sina.com.cn/s/blog_63a9d9f301015q67.html\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">（1）</a>&nbsp; &nbsp;<a href=\"http://www.cnblogs.com/ggjucheng/archive/2011/12/15/2289291.html\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">（2）</a>&nbsp; （类名以及方法名第一个字母大写，库类除外，如string。）</p><p style=\"margin: 10px auto;padding: 0px\">&nbsp; &nbsp; &nbsp;&nbsp;<strong style=\";padding: 0px\">匈牙利命名法：</strong>&nbsp;&nbsp;&nbsp;<a href=\"http://www.cnblogs.com/totem1990/archive/2012/03/26/2418474.html\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">（3）</a>&nbsp; &nbsp;<a href=\"http://blog.csdn.net/buglu/article/details/953492\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">（4）</a>&nbsp;（包含该法的优势实例）</p><p style=\"margin: 10px auto;padding: 0px\">&nbsp; &nbsp; &nbsp;&nbsp;<strong style=\";padding: 0px\">某公司的C++命名规范:</strong>&nbsp;&nbsp; &nbsp;<a href=\"http://www.cnblogs.com/joinclear/archive/2013/02/21/2921422.html\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">（5）</a></p><p style=\"margin: 10px auto;padding: 0px\">6、<strong style=\";padding: 0px\">重载overload、重写override、重定义redifining</strong>&nbsp;的差别 ：<a href=\"http://www.cnblogs.com/BeyondTechnology/archive/2010/09/20/1831441.html\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">http://www.cnblogs.com/BeyondTechnology/archive/2010/09/20/1831441.html</a></p><p style=\"margin: 10px auto;padding: 0px\">7、构造函数<strong style=\";padding: 0px\">初始化列表作用</strong>：对数据域的基本类型、对象进行赋值；还可以用于初始化 父类没有无参构造函数的情况时 的构造函数，</p><p style=\"margin: 10px auto;padding: 0px\">&nbsp; &nbsp; &nbsp; &nbsp;比如logic_error 没有无参构造函数，继承logic_error 必须在子类的 构造函数签名后面加上—— “:logic_error(&quot;Logic error happens!&quot;)”</p><p style=\"margin: 10px auto;padding: 0px\">8、格式化输入输出：<a href=\"http://blog.csdn.net/chenggil10/article/details/4181649\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">http://blog.csdn.net/chenggil10/article/details/4181649</a>&nbsp;</p><p style=\"margin: 10px auto;padding: 0px\">&nbsp;　　　　　　　　　&nbsp;<a href=\"http://wenwen.sogou.com/z/q347507263.htm\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">http://wenwen.sogou.com/z/q347507263.htm</a></p><p style=\"margin: 10px auto;padding: 0px\">9、template 中的 class 和 typename 的<a href=\"http://zhidao.baidu.com/link?url=Kfuw5FAg1Zw9W75vAK1nTTGhd3lRR_7KYRSl5H6igFq3fETkuwVCitiMlZnlY58ssVPkAsHG-IaFIi6oQAQMs_\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">区别</a></p><p style=\"margin: 10px auto;padding: 0px\">10、cin是istream类的一个C++预定义对象。而istream重载了void * 和!等等一些运算符，代码cin&gt;&gt;a之后返回还是一个cin对象的引用，此时cin会测试是否达到</p><p style=\"margin: 10px auto;padding: 0px\">文件末尾（会设置eofbit位），或者流出错（设置badbit或者failbit）。</p><p style=\"margin: 10px auto;padding: 0px\">11、C++中的&nbsp;<a href=\"http://www.cnblogs.com/CBDoctor/archive/2011/12/06/2277918.html\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">四种强制类型转换</a></p><p style=\"margin: 10px auto;padding: 0px\">12、1）常见容器：<span style=\";padding: 0px\">list,vector,deque有什么区别 &nbsp;</span></p><p style=\"margin: 10px auto;padding: 0px\"><span style=\";padding: 0px\">　　主要内容：各种顺序容器的比较，存储、操作的区别</span></p><p style=\"margin: 10px auto;padding: 0px\"><span style=\";padding: 0px\">　　链接： &nbsp; &nbsp;&nbsp;<a href=\"http://cutely606.blog.163.com/blog/static/26607977201191653517926/\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">http://cutely606.blog.163.com/blog/static/26607977201191653517926/</a></span></p><p style=\"margin: 10px auto;padding: 0px\"><span style=\";padding: 0px\">　　2）</span><span style=\";padding: 0px\">vector中erase用法注意事项</span></p><p style=\"margin: 10px auto;padding: 0px\"><span style=\";padding: 0px\">　　主要内容：删除vector中某个特定元素（使用iterator的注意事项）</span></p><p style=\"margin: 10px auto;padding: 0px\"><span style=\";padding: 0px\">&nbsp;　　链接： &nbsp; &nbsp;<a href=\"http://blog.csdn.net/daofengdeba/article/details/7865229\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">http://blog.csdn.net/daofengdeba/article/details/7865229</a></span></p><p><strong style=\";padding: 0px\">2、常用函数</strong></p><p style=\"margin: 10px auto;padding: 0px\">&nbsp;1、fopen函数 &nbsp; &nbsp; &nbsp;2、文件操作 &nbsp;3、产生随机数 &nbsp;4、各种类型转换成字符串 &nbsp; 5、cstring、string、char* 之间互相转换&nbsp;</p><hr/><p style=\"margin: 10px auto;padding: 0px\">&nbsp;</p><p style=\"margin: 10px auto;padding: 0px\">1、fopen(&quot;fileName.fileType&quot;,&quot;pattern&quot;) 可以同时打开同一个文件而不出错，原理如下：</p><p style=\"margin: 10px auto;padding: 0px\">&nbsp; &nbsp; &nbsp;<strong style=\";padding: 0px\">fopen():</strong>（1）在磁盘找到指定文件</p><p style=\"margin: 10px auto;padding: 0px\">　　 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; （2）在内存中分配保存一个FILE类型结构的单元（16B或32B）</p><p style=\"margin: 10px auto;padding: 0px\">　　　　　　 &nbsp;（3）在内存中分配文件缓冲区单元（512B）</p><p style=\"margin: 10px auto;padding: 0px\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;（4）返回FILE结构地址（回送给fp）</p><p style=\"margin: 10px auto;padding: 0px\">2、C常用函数:&nbsp;<a href=\"http://blog.csdn.net/henjay724/article/details/8425861\" style=\";padding: 0px;color: rgb(0, 0, 0)\">C文件流I/O操作：FILE类型</a>&nbsp;</p><p style=\"margin: 10px auto;padding: 0px\">&nbsp; &nbsp;&nbsp;<strong style=\";padding: 0px\">&nbsp;C与C++ 文件操作的区别&nbsp;</strong>总结：<a href=\"http://blog.sina.com.cn/s/blog_6e7fed390100z0j1.html\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">http://blog.sina.com.cn/s/blog_6e7fed390100z0j1.html</a></p><p style=\"margin: 10px auto;padding: 0px\">　 &nbsp;C++&nbsp;<strong style=\";padding: 0px\">fstream 类的 函数eof()</strong>&nbsp;使用要注意，只有当读取失败发现没啥可读时，</p><p style=\"margin: 10px auto;padding: 0px\">　　　　　 &nbsp; &nbsp;才将 eofbit 位置为1：<a href=\"http://blog.csdn.net/shuilan0066/article/details/4669451\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">http://blog.csdn.net/shuilan0066/article/details/4669451</a></p><p style=\"margin: 10px auto;padding: 0px\">3、 &nbsp;产生随机数：<a href=\"http://blog.csdn.net/beyond0824/article/details/6009908\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">链接</a></p><p style=\"margin: 10px auto;padding: 0px\">4、<strong style=\";padding: 0px\">各种类型 转成字符串</strong>&nbsp;&nbsp; &nbsp; 链接：<a href=\"http://www.cnblogs.com/luxiaoxun/archive/2012/08/03/2621803.html\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">http://www.cnblogs.com/luxiaoxun/archive/2012/08/03/2621803.html</a></p><p style=\"margin: 10px auto;padding: 0px\">5、<strong style=\";padding: 0px\">cstring、string、char* 之间的互相转换</strong>&nbsp;：<a href=\"http://www.cnblogs.com/bluestorm/p/3168720.html\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">http://www.cnblogs.com/bluestorm/p/3168720.html</a></p><p style=\"margin: 10px auto;padding: 0px\">&nbsp; &nbsp; &nbsp; &nbsp;string 转为 char* 的三个函数&nbsp;<strong style=\";padding: 0px\">&nbsp;c_str()、data()、copy(p,n)</strong>的用法 ：<a href=\"http://www.cnblogs.com/qlwy/archive/2012/03/25/2416937.html\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">http://www.cnblogs.com/qlwy/archive/2012/03/25/2416937.html</a></p><p style=\"margin: 10px auto;padding: 0px\">&nbsp; &nbsp; &nbsp; &nbsp;string::<strong style=\";padding: 0px\">c_str()</strong>&nbsp;详解：<a href=\"http://blog.csdn.net/jinzhilong580231/article/details/7161168\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">http://blog.csdn.net/jinzhilong580231/article/details/7161168</a></p><p style=\"margin: 10px auto;padding: 0px\">&nbsp;</p><p><strong style=\";padding: 0px\">3、编程注意</strong></p><p style=\"margin: 10px auto;padding: 0px\">&nbsp;1、模块结束时异常结束可能原因 &nbsp; 2、delete和delete[] &nbsp; &nbsp;2、不要返回临时对象指针 &nbsp; &nbsp;3、返回局部结构体变量 &nbsp; &nbsp;4、以const 方式传入对象的参数，只能使用类的const函数</p><hr/><p style=\"margin: 10px auto;padding: 0px\">&nbsp;</p><p style=\"margin: 10px auto;padding: 0px\">1、程序在&nbsp;<strong style=\";padding: 0px\">模块&nbsp;结束时异常结束</strong>，有可能是 析构对象时，delete 了野指针。</p><p style=\"margin: 10px auto;padding: 0px\">&nbsp; &nbsp; 解决：1、特别注意函数参数 谨慎使用&nbsp;对象的值传递。对象参数最好使用引用传递。</p><p style=\"margin: 10px auto;padding: 0px\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2、若一定要使用 值传递，需要 实现&nbsp;拷贝构造函数&nbsp;进行深复制。</p><p style=\"margin: 10px auto;padding: 0px\"><span style=\";padding: 0px\">2、delete和delete[] 使用的区别</span></p><p style=\"margin: 10px auto;padding: 0px\"><span style=\";padding: 0px\">链接：&nbsp;<a href=\"http://yiyunscu.blog.163.com/blog/static/3626332020105102623649/\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">http://yiyunscu.blog.163.com/blog/static/3626332020105102623649/</a></span></p><p style=\"margin: 10px auto;padding: 0px\">3、error: invalid initialization of non-const reference of type &quot;MyString&amp;&quot; from a temporary of type &quot;MyString*&quot;;</p><p style=\"margin: 10px auto;padding: 0px\">&nbsp; &nbsp;问题：MyString &amp;Function(); &nbsp;无法用函数中的 MyString 的临时对象来 对 MyString 非常量引用 进行初始化</p><p style=\"margin: 10px auto;padding: 0px\">&nbsp; &nbsp;解决：<strong style=\";padding: 0px\">不要返回栈临时对象</strong>，应该返回在堆里分配的变量。</p><p style=\"margin: 10px auto;padding: 0px\">4、<strong style=\";padding: 0px\">返回局部结构体变量</strong>&nbsp;<a href=\"http://bbs.csdn.net/topics/390336076\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">相当于 返回一个基础类型的局部变量，不同于对象的临时变量的返回。</a></p><p style=\"margin: 10px auto;padding: 0px\">5、以const 方式传入对象的参数，只能使用类的const函数</p><p><strong style=\";padding: 0px\">4、编译问题</strong></p><p style=\"margin: 10px auto;padding: 0px\">1、编译错误：expected type-specifier (多文件编译问题)</p><hr/><p style=\"margin: 10px auto;padding: 0px\">&nbsp;</p><p style=\"margin: 10px auto;padding: 0px\">1、编译错误：遇到&nbsp;<strong style=\";padding: 0px\">expected type-specifier</strong>&nbsp;before &#39;XXX&#39; 应该考虑下可能是出于什么原因导致 编译器&nbsp;无法及时使用某些头文件的声明&nbsp;或 没用 &quot;命名空间 using namespace XX;&quot;。</p><p style=\"margin: 10px auto;padding: 0px\">&nbsp; &nbsp;&nbsp;<strong style=\";padding: 0px\">多文件的编译问题</strong>：</p><p style=\"margin: 10px auto;padding: 0px\">&nbsp; &nbsp; 从使用的角度：<a href=\"http://blog.csdn.net/gexiaobaohelloworld/article/details/7293230\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">http://blog.csdn.net/gexiaobaohelloworld/article/details/7293230</a></p><p style=\"margin: 10px auto;padding: 0px\">&nbsp; &nbsp; 从原理的角度：<a href=\"http://blog.sina.com.cn/s/blog_482f7c480100fr74.html\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">http://blog.sina.com.cn/s/blog_482f7c480100fr74.html</a></p><p><strong style=\";padding: 0px\">5、拓展链接</strong></p><p style=\"margin: 10px auto;padding: 0px\"><span style=\";padding: 0px\">1、C/C++中文网</span></p><p style=\"margin: 10px auto;padding: 0px\"><span style=\";padding: 0px\">　　主要内容：C++初步知识，C++基础知识</span></p><p style=\"margin: 10px auto;padding: 0px\"><span style=\";padding: 0px\">　　链接：<a href=\"http://see.xidian.edu.cn/cpp/biancheng/cpp/rumen_1/\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">http://see.xidian.edu.cn/cpp/biancheng/cpp/rumen_1/</a></span></p><p style=\"margin: 10px auto;padding: 0px\">2、C++库介绍-标准库、类库</p><p style=\"margin: 10px auto;padding: 0px\"><span style=\";padding: 0px\">　　链接：<a href=\"http://www.cnblogs.com/chio/articles/806468.html#1\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">http://www.cnblogs.com/chio/articles/806468.html#1</a></span></p><p style=\"margin: 10px auto;padding: 0px\">&nbsp;</p><hr/><table><tbody style=\";padding: 0px\"><tr style=\";padding: 0px\" class=\"firstRow\"><td style=\";padding: 0px\"><strong style=\";padding: 0px\">版权声明</strong><br/>本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/\" style=\";padding: 0px;color: rgb(0, 0, 0)\">BensonLaur</a>&nbsp; 和本文原始地址：<br/><a href=\"http://www.cnblogs.com/BensonLaur/p/5234557.html\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\"><span style=\";padding: 0px\">http://www.cnblogs.com/BensonLaur/p/5234557.html</span></a></td></tr></tbody></table><p>分类:&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/category/664224.html\" target=\"_blank\" style=\";padding: 0px;color: rgb(0, 0, 0)\">C++</a></p><p><br/></p>', '2017-3-28 21:08:31', '2017-3-29 13:41:55', 1, 0, 0, '1', '1、块域     2、static 作用域     3、RAII       4、const char * 组合使用        5、C++命名规范（一般原则、匈牙利命名法、某公司应用实例）        6、重载overload、重写override、重定义redifining 的差别      7、初始化列表作用   8、格式化输入输出   9、template 中的class 和 typename        10、cin   11、强制类型转换   12、常见容器0、c++教程1、C++中的块域{}2、static变量 及 作用域控制3、C++资源管理的利器——RAII惯用法（“Resource Acquisition Is Initialization”）      链接：http://www.cnblogs.com/hsinwang/articles/214663.html      全面介绍Windows内存管理机制及C++内存分配实例4、char* 与 char[] 的差别 + const-char-* 的理解       链接：http://blog.csdn.net/zhuzhihai1988/article/details/77261325、C++命名规则： （1）   （2）  （类名以及方法名第一个字母大写，库类除外，如string。）      匈牙利命名法：   （3）   （4） （包含该法的优势实例）      某公司的C++命名规范:    （5）6、重载overload、重写override、重定义redifining 的差别 ：http://www.cnblogs.com/BeyondTechnology/archive/2010/09/20/1831441.html7、构造函数初始化列表作用：对数据域的基本类型、对象进行赋值；还可以用于初始化 父类没有无参构造函数的情况时 的构造函数，       比如logic_error 没有无参构造函数，继承logic_error 必须在子类的 构造函数签名后面加上—— “:logic_error(\"Logic error happens!\")”8、格式化输入输出：http://blog.csdn.net/chenggil10/article/details/4181649  　　　　　　　　　 http://wenwen.sogou.com/z/q347507263.htm9、template 中的 class 和 typename 的区别10、cin是istream类的一个C++预定义对象。而istream重载了void * 和!等等一些运算符，代码cin>>a之后返回还是一个cin对象的引用，此时cin会测试是否达到文件末尾（会设置eofbit位），或者流出错（设置badbit或者failbit）。11、C++中的 四种强制类型转换12、1）常见容器：list,vector,deque有什么区别  　　主要内容：各种顺序容器的比较，存储、操作的区别　　链接：     http://cutely606.blog.163.com/blog/static/26607977201191653517926/　　2）vector中erase用法注意事项　　主要内容：删除vector中某个特定元素（使用iterator的注意事项） 　　链接：    http://blog.csdn.net/daofengdeba/article/details/78652292、常用函数 1、fopen函数      2、文件操作  3、产生随机数  4、各种类型转换成字符串   5、cstring、string、char* 之间互相转换  1、fopen(\"fileName.fileType\",\"pattern\") 可以同时打开同一个文件而不出错，原理如下：     fopen():（1）在磁盘找到指定文件　　             （2）在内存中分配保存一个FILE类型结构的单元（16B或32B）　　　　　　  （3）在内存中分配文件缓冲区单元（512B）                   （4）返回FILE结构地址（回送给fp）2、C常用函数: C文件流I/O操作：FILE类型      C与C++ 文件操作的区别 总结：http://blog.sina.com.cn/s/blog_6e7fed390100z0j1.html　  C++ fstream 类的 函数eof() 使用要注意，只有当读取失败发现没啥可读时，　　　　　    才将 eofbit 位置为1：http://blog.csdn.net/shuilan0066/article/details/46694513、  产生随机数：链接4、各种类型 转成字符串     链接：http://www.cnblogs.com/luxiaoxun/archive/2012/08/03/2621803.html5、cstring、string、char* 之间的互相转换 ：http://www.cnblogs.com/bluestorm/p/3168720.html       string 转为 char* 的三个函数  c_str()、data()、copy(p,n)的用法 ：http://www.cnblogs.com/qlwy/archive/2012/03/25/2416937.html       string::c_str() 详解：http://blog.csdn.net/jinzhilong580231/article/details/7161168 3、编程注意 1、模块结束时异常结束可能原因   2、delete和delete[]    2、不要返回临时对象指针    3、返回局部结构体变量    4、以const 方式传入对象的参数，只能使用类的const函数 1、程序在 模块 结束时异常结束，有可能是 析构对象时，delete 了野指针。    解决：1、特别注意函数参数 谨慎使用 对象的值传递。对象参数最好使用引用传递。            2、若一定要使用 值传递，需要 实现 拷贝构造函数 进行深复制。2、delete和delete[] 使用的区别链接： http://yiyunscu.blog.163.com/blog/static/3626332020105102623649/3、error: invalid initialization of non-const reference of type \"MyString&\" from a temporary of type \"MyString*\";   问题：MyString &Function();  无法用函数中的 MyString 的临时对象来 对 MyString 非常量引用 进行初始化   解决：不要返回栈临时对象，应该返回在堆里分配的变量。4、返回局部结构体变量 相当于 返回一个基础类型的局部变量，不同于对象的临时变量的返回。5、以const 方式传入对象的参数，只能使用类的const函数4、编译问题1、编译错误：expected type-specifier (多文件编译问题) 1、编译错误：遇到 expected type-specifier before \'XXX\' 应该考虑下可能是出于什么原因导致 编译器 无法及时使用某些头文件的声明 或 没用 \"命名空间 using namespace XX;\"。    多文件的编译问题：    从使用的角度：http://blog.csdn.net/gexiaobaohelloworld/article/details/7293230    从原理的角度：http://blog.sina.com.cn/s/blog_482f7c480100fr74.html5、拓展链接1、C/C++中文网　　主要内容：C++初步知识，C++基础知识　　链接：http://see.xidian.edu.cn/cpp/biancheng/cpp/rumen_1/2、C++库介绍-标准库、类库　　链接：http://www.cnblogs.com/chio/articles/806468.html#1 版权声明本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者 BensonLaur  和本文原始地址：http://www.cnblogs.com/BensonLaur/p/5234557.html分类: C++', '0');
INSERT INTO `t_article` VALUES ('20170328210917hzi', '20170322225547o', 'C++ —— 构建开源的开发环境', '<p style=\"margin: 10px auto; padding: 0px;\">目录：</p><p style=\"margin: 10px auto; padding: 0px;\">　　　　1、开源环境的选择：IDE+编译器</p><p style=\"margin: 10px auto; padding: 0px;\">　　　　2、构建步骤</p><hr/><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">1、开源环境的选择：IDE+编译器</p><p style=\"margin: 10px auto; padding: 0px;\">　　在这里选择都是发布在GPL license 下的工具：codeblocks 和 gnu gcc</p><p style=\"margin: 10px auto; padding: 0px;\">　　codeblocks 最新版下载：<a href=\"http://www.codeblocks.org/downloads/binaries\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">http://www.codeblocks.org/downloads/binaries</a></p><p style=\"margin: 10px auto; padding: 0px;\">　　gcc release 说明：这里是<a href=\"https://gcc.gnu.org/releases.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">gcc源码发行说明</a>&nbsp;&nbsp;-&gt; 发行的是gcc源码（因为每次有更改时要同时为多个平台提供预编译好的文件很难）-&gt;<a href=\"https://gcc.gnu.org/install/binaries.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">&nbsp;选择不同的平台</a>自己去下载&nbsp;-&gt; 这里我选择Windows 的<a href=\"http://www.mingw.org/\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">&nbsp;MinGW</a>&nbsp;，进入对应网站介绍&nbsp;&nbsp;-&gt;简单了解后，点击downLoad 进入 SourceForge&nbsp;<a href=\"https://sourceforge.net/projects/mingw/files/\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">下载页面</a>&nbsp;-&gt; 在页面中，点击<strong style=\"margin: 0px; padding: 0px;\"><a title=\"/Installer/mingw-get-setup.exe:  released on 2013-10-04 19:28:56 UTC\" href=\"https://sourceforge.net/projects/mingw/files/latest/download?source=files\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">Download mingw-get-setup.exe (86.5 kB)</a></strong>&nbsp;下载 MinGW安装管理器&nbsp;。 &nbsp; &nbsp;（这些过程可能需要Ｆ GＦW）</p><p style=\"margin: 10px auto; padding: 0px;\">　　这个管理器也是GPL开源的，功能是可以让你选择想要安装的 gnu gcc 编译器版本，如C编译器、C++编译器、Ada编译器等，然后在线下载并得到最终的编译器。</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">2、构建步骤</p><p style=\"margin: 10px auto; padding: 0px;\">　　在官网下载 codeblock后，新建一个简单的console项目，这是简单的Hello World 也是执行不了的。因为默认下应该是没有编译器的，需要自己下载并在codeblocks里指定，这就是要下载上面提到的 MinGW的原因了。</p><p style=\"margin: 10px auto; padding: 0px;\">　　在CodeBlock 指定编译器的方法： Setting -&gt; Compiler... -&gt; Select Compiler -&gt; Gnu Gcc Compiler -&gt; ToolChain executables -&gt; 选择安装MinGW的目录（如下图）</p><p style=\"margin: 10px auto; padding: 0px;\"><br/></p><p style=\"margin: 10px auto; padding: 0px;\">在这之前，需要先用上面的 mingw-get-setup.exe 安装后的的 MinGW安装管理器&nbsp;选择&nbsp;想要安装的 gnu gcc 编译器版本来安装，因为这个只是一个管理器，本身没有编译器的任何东西，他只是提供方便的下载选择。</p><p style=\"margin: 10px auto; padding: 0px;\">经过观察编译器的说明和我自己的需要，我选择了C和C++编译器，分别是mingw32-base 和 mingw32-gcc-g++：（如下图）</p><p style=\"margin: 10px auto; padding: 0px;\"><br/></p><p style=\"margin: 10px auto; padding: 0px;\">勾选之后，点击 Installation-&gt;apply changes 便会自动安装，安装完之后再在上面提到的CodeBlock选择安装目录那里指定你的安装MinGW的目录。</p><p style=\"margin: 10px auto; padding: 0px;\">点击OK保存后，编译一个简单的C++ console Hello World 程序，编译器报错：</p><p style=\"margin: 10px auto; padding: 0px;\">ld.exe &nbsp; &nbsp; not found -lpthread</p><p style=\"margin: 10px auto; padding: 0px;\">这是缺少库 pthread 的意思，这个好像跟&nbsp;<a href=\"https://zh.wikipedia.org/zh/POSIX\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">posix 标准</a>有关，这个gcc 运行使用的接口可能是用这个标准写的（由下图 thread mode:posix 猜测），所以需要用到相应的库。</p><p style=\"margin: 10px auto; padding: 0px;\"><br/></p><p style=\"margin: 10px auto; padding: 0px;\">所幸&nbsp;MinGW安装管理器 也 提供了相关库的下载，如下：</p><p style=\"margin: 10px auto; padding: 0px;\">All Packages -&gt; MinGW -&gt; MinGW Libraries -&gt; 此时在右边的列表里，早到如图三个mingw32-pthreads-w32 (应该在最下面，class 为doc的那个是文档，不要的话应该也可以，其他dev 和 lic 我不知具体是什么，这两个最好要选上)，然后同样在勾选之后，点击 Installation-&gt;apply changes 安装完应该就可以了。至少我是可以编译C\\C++ Console程序了。</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><hr/><table align=\"center\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">版权声明</strong><br/>本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">BensonLaur</a>&nbsp; 和本文原始地址：<br/><a href=\"http://www.cnblogs.com/BensonLaur/p/5839996.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span style=\"margin: 0px; padding: 0px;\">http://www.cnblogs.com/BensonLaur/p/5839996.html</span></a></td></tr></tbody></table><p>分类:&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/category/664224.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">C++</a></p><p><br/></p>', '2017-3-28 21:09:17', '2017-3-29 13:41:51', 2, 0, 0, '1', '目录：　　　　1、开源环境的选择：IDE+编译器　　　　2、构建步骤 1、开源环境的选择：IDE+编译器　　在这里选择都是发布在GPL license 下的工具：codeblocks 和 gnu gcc　　codeblocks 最新版下载：http://www.codeblocks.org/downloads/binaries　　gcc release 说明：这里是gcc源码发行说明  -> 发行的是gcc源码（因为每次有更改时要同时为多个平台提供预编译好的文件很难）-> 选择不同的平台自己去下载 -> 这里我选择Windows 的 MinGW ，进入对应网站介绍  ->简单了解后，点击downLoad 进入 SourceForge 下载页面 -> 在页面中，点击Download mingw-get-setup.exe (86.5 kB) 下载 MinGW安装管理器 。    （这些过程可能需要Ｆ GＦW）　　这个管理器也是GPL开源的，功能是可以让你选择想要安装的 gnu gcc 编译器版本，如C编译器、C++编译器、Ada编译器等，然后在线下载并得到最终的编译器。 2、构建步骤　　在官网下载 codeblock后，新建一个简单的console项目，这是简单的Hello World 也是执行不了的。因为默认下应该是没有编译器的，需要自己下载并在codeblocks里指定，这就是要下载上面提到的 MinGW的原因了。　　在CodeBlock 指定编译器的方法： Setting -> Compiler... -> Select Compiler -> Gnu Gcc Compiler -> ToolChain executables -> 选择安装MinGW的目录（如下图）在这之前，需要先用上面的 mingw-get-setup.exe 安装后的的 MinGW安装管理器 选择 想要安装的 gnu gcc 编译器版本来安装，因为这个只是一个管理器，本身没有编译器的任何东西，他只是提供方便的下载选择。经过观察编译器的说明和我自己的需要，我选择了C和C++编译器，分别是mingw32-base 和 mingw32-gcc-g++：（如下图）勾选之后，点击 Installation->apply changes 便会自动安装，安装完之后再在上面提到的CodeBlock选择安装目录那里指定你的安装MinGW的目录。点击OK保存后，编译一个简单的C++ console Hello World 程序，编译器报错：ld.exe     not found -lpthread这是缺少库 pthread 的意思，这个好像跟 posix 标准有关，这个gcc 运行使用的接口可能是用这个标准写的（由下图 thread mode:posix 猜测），所以需要用到相应的库。所幸 MinGW安装管理器 也 提供了相关库的下载，如下：All Packages -> MinGW -> MinGW Libraries -> 此时在右边的列表里，早到如图三个mingw32-pthreads-w32 (应该在最下面，class 为doc的那个是文档，不要的话应该也可以，其他dev 和 lic 我不知具体是什么，这两个最好要选上)，然后同样在勾选之后，点击 Installation->apply changes 安装完应该就可以了。至少我是可以编译C\\C++ Console程序了。 版权声明本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者 BensonLaur  和本文原始地址：http://www.cnblogs.com/BensonLaur/p/5839996.html分类: C++', '0');
INSERT INTO `t_article` VALUES ('20170328211019uyn', '20170322225547o', 'C++ —— 时间与日期', '<table><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding-right: 12px; padding-left: 12px; border-color: silver; border-collapse: collapse; font-size: 22px; text-align: center; background: rgb(232, 232, 232); line-height: 30px; color: rgb(153, 153, 153);\" width=\"25\">导读</td><td style=\"margin: 0px; padding-top: 10px; padding-bottom: 12px; border-color: silver; border-collapse: collapse; line-height: 20px; font-size: 13px;\"><p style=\"margin: 10px auto;\"><strong style=\"margin: 0px; padding: 0px;\">在平时编程中有时需要获取当前的时间或者日期，然而不同的平台不同的场景下，有时使用的API也不尽相同。一般来说，C/C++中关于时间的标准库函数在不同的平台的都可以使用，可一些与平台相关的函数就只能在特定的平台上使用了。</strong></p><p style=\"margin: 10px auto;\"><strong style=\"margin: 0px; padding: 0px;\">本文将记录C++ 中与时间相关的日期相关的函数 和 相关的数据类型。同时对不同系统平台的API进行对比，区别以加深相关知识的记忆。</strong></p></td></tr></tbody></table><hr/><table><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding-right: 12px; padding-left: 12px; border-color: silver; border-collapse: collapse; font-size: 22px; background: rgb(232, 232, 232); color: rgb(153, 153, 153);\" width=\"25\">目录</td><td style=\"margin: 0px; padding: 3px 20px 3px 3px; border-color: silver; border-collapse: collapse; font-size: 14px;\"><ol style=\"padding: 0px 0px 0px 40px;\" class=\" list-paddingleft-2\"><li><p><a href=\"http://www.cnblogs.com/BensonLaur/p/6125915.html#title1_1\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">C++当中时间与日期相关的函数与类型</a></p></li><li><p><a href=\"http://www.cnblogs.com/BensonLaur/p/6125915.html#title1_2\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">Windows 平台的时间函数</a></p></li><li><p><a href=\"http://www.cnblogs.com/BensonLaur/p/6125915.html#title1_3\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">Linux 平台的时间函数</a></p></li><li><p><a href=\"http://www.cnblogs.com/BensonLaur/p/6125915.html#title1_4\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">其他</a></p></li></ol></td></tr></tbody></table><p style=\"margin: 10px auto; padding: 0px;\">参考：<a href=\"http://www.cppreference.com/\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">C++ API 在线</a></p><p><strong style=\"margin: 0px; padding: 0px;\">1、C++中 时间与日期相关的函数与类型</strong></p><p style=\"margin: 10px auto; padding: 0px;\">C++ 支持两种类型的时间操作：</p><ul style=\"margin-left: 30px; padding: 0px; word-break: break-all;\" class=\" list-paddingleft-2\"><li><p>chrono 库，一个多样的函数集合，可以多样的、不同的精度来表示时间。&nbsp;(e.g.&nbsp;<span class=\"t-lc\" style=\"margin: 0px; padding: 0px;\"><a title=\"cpp/chrono/time point\" href=\"http://en.cppreference.com/w/cpp/chrono/time_point\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">std::chrono::time_point</a>).</span>（C11后的标准，有兴趣可以进一步<a href=\"http://en.cppreference.com/w/cpp/chrono\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">了解</a>）</p></li><li><p>C类型 的时间和日期库。(e.g.&nbsp;<span class=\"t-lc\" style=\"margin: 0px; padding: 0px;\"><a title=\"cpp/chrono/c/time\" href=\"http://en.cppreference.com/w/cpp/chrono/c/time\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">std::time</a>)&nbsp;</span></p></li></ul><p style=\"margin: 10px auto; padding: 0px;\">在这里主要记录常用的C类型的 时间和日期库。</p><h3 style=\"margin: 10px 0px; padding: 0px; font-size: 16px; line-height: 1.5;\"><span class=\"mw-headline\" style=\"margin: 0px; padding: 0px;\">函数：</span></h3><table class=\"t-dsc-begin\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td colspan=\"2\" style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><h5 style=\"margin: 10px 0px; padding: 0px; font-size: 12px; color: rgb(51, 51, 51);\"><span class=\"mw-headline\" style=\"margin: 0px; padding: 0px;\">时间操作</span></h5></td></tr><tr class=\"t-dsc-header\" style=\"margin: 0px; padding: 0px;\"><td colspan=\"2\" style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p>头文件：&nbsp;<code style=\"margin: 0px; padding: 0px;\">&lt;time.h&gt;</code></p></td></tr><tr class=\"t-dsc\" style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p><a title=\"c/chrono/difftime\" href=\"http://en.cppreference.com/w/c/chrono/difftime\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">difftime</span></a></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">(函数)计算2个时间的差值 (参数为2个time_t数据,arg1-arg2，返回值为double)</td></tr><tr class=\"t-dsc\" style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p><a title=\"c/chrono/time\" href=\"http://en.cppreference.com/w/c/chrono/time\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">time</span></a></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">(函数)返回自格林威治1970.01.01 到现在的系统日历时间 (struct tm)<span class=\"t-mark\" style=\"margin: 0px; padding: 0px;\"><br/></span></td></tr><tr class=\"t-dsc\" style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p><a title=\"c/chrono/clock\" href=\"http://en.cppreference.com/w/c/chrono/clock\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">clock</span></a></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">(函数)返回自程序启动以来的 原生处理器时钟时间 （ raw processor clock time）&nbsp;<span class=\"t-mark\" style=\"margin: 0px; padding: 0px;\"><br/></span></td></tr><tr class=\"t-dsc\" style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p><a title=\"c/chrono/timespec get\" href=\"http://en.cppreference.com/w/c/chrono/timespec_get\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">timespec_get</span></a></p><p><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">(since C11)</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">(函数)返回基于一个给定 time base (如 TIME_UTC) 的日历时间 (struct timespec)<span class=\"t-mark\" style=\"margin: 0px; padding: 0px;\"><br/></span></td></tr><tr style=\"margin: 0px; padding: 0px;\"><td colspan=\"2\" style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><h5 style=\"margin: 10px 0px; padding: 0px; font-size: 12px; color: rgb(51, 51, 51);\"><span class=\"mw-headline\" style=\"margin: 0px; padding: 0px;\">格式转换</span></h5></td></tr><tr class=\"t-dsc-header\" style=\"margin: 0px; padding: 0px;\"><td colspan=\"2\" style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p>头文件：&nbsp;<code style=\"margin: 0px; padding: 0px;\">&lt;time.h&gt;</code></p></td></tr><tr class=\"t-dsc\" style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p><a title=\"c/chrono/asctime\" href=\"http://en.cppreference.com/w/c/chrono/asctime\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">asctime</span></a></p><p><a title=\"c/chrono/asctime\" href=\"http://en.cppreference.com/w/c/chrono/asctime\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">asctime_s</span></a></p><p><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">(C11)</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">(函数)将&nbsp;<code style=\"margin: 0px; padding: 0px;\">tm</code>&nbsp;对象转为文本表示（通过<span class=\"t-lc\" style=\"margin: 0px; padding: 0px;\"><span class=\"t-c\" style=\"margin: 0px; padding: 0px;\"><span class=\"mw-geshi c source-c\" style=\"margin: 0px; padding: 0px;\">Www Mmm dd hh<span class=\"sy4\" style=\"margin: 0px; padding: 0px;\">:mm<span class=\"sy4\" style=\"margin: 0px; padding: 0px;\">:ss yyyy定制）</span></span></span></span></span>&nbsp;<span class=\"t-mark\" style=\"margin: 0px; padding: 0px;\"><br/></span></td></tr><tr class=\"t-dsc\" style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p><a title=\"c/chrono/ctime\" href=\"http://en.cppreference.com/w/c/chrono/ctime\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">ctime</span></a></p><p><a title=\"c/chrono/ctime\" href=\"http://en.cppreference.com/w/c/chrono/ctime\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">ctime_s</span></a></p><p><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">(C11)</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">(函数)将&nbsp;<code style=\"margin: 0px; padding: 0px;\">time_t</code>&nbsp;对象转为文本表示&nbsp;<span class=\"t-mark\" style=\"margin: 0px; padding: 0px;\"><br/></span></td></tr><tr class=\"t-dsc\" style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p><a title=\"c/chrono/strftime\" href=\"http://en.cppreference.com/w/c/chrono/strftime\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">strftime</span></a></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">(函数)将&nbsp;<code style=\"margin: 0px; padding: 0px;\">tm</code>&nbsp;对象转为 自定义 的文本表示&nbsp;<span class=\"t-mark\" style=\"margin: 0px; padding: 0px;\"><br/></span></td></tr><tr class=\"t-dsc-header\" style=\"margin: 0px; padding: 0px;\"><td colspan=\"2\" style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p>头文件：&nbsp;<code style=\"margin: 0px; padding: 0px;\">&lt;wchar.h&gt;</code></p></td></tr><tr class=\"t-dsc\" style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p><a title=\"c/chrono/wcsftime\" href=\"http://en.cppreference.com/w/c/chrono/wcsftime\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">wcsftime</span></a></p><p><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">(C95)</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">(函数)将 tm 对象转换为 自定义的 宽字节 字符串文本&nbsp;<span class=\"t-mark\" style=\"margin: 0px; padding: 0px;\"><br/></span></td></tr><tr class=\"t-dsc-header\" style=\"margin: 0px; padding: 0px;\"><td colspan=\"2\" style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p>头文件：&nbsp;<code style=\"margin: 0px; padding: 0px;\">&lt;time.h&gt;</code></p></td></tr><tr class=\"t-dsc\" style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p><a title=\"c/chrono/gmtime\" href=\"http://en.cppreference.com/w/c/chrono/gmtime\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">gmtime</span></a></p><p><a title=\"c/chrono/gmtime\" href=\"http://en.cppreference.com/w/c/chrono/gmtime\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">gmtime_s</span></a></p><p><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">(C11)</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">(函数)time_t 转为 tm （UTC 时间）&nbsp;<span class=\"t-mark\" style=\"margin: 0px; padding: 0px;\"><br/></span></td></tr><tr class=\"t-dsc\" style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p><a title=\"c/chrono/localtime\" href=\"http://en.cppreference.com/w/c/chrono/localtime\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">localtime</span></a></p><p><a title=\"c/chrono/localtime\" href=\"http://en.cppreference.com/w/c/chrono/localtime\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">localtime_s</span></a></p><p><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">(C11)</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">(函数) time_t 转为 tm （本地时间）&nbsp;<span class=\"t-mark\" style=\"margin: 0px; padding: 0px;\"><br/></span></td></tr><tr class=\"t-dsc\" style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p><a title=\"c/chrono/mktime\" href=\"http://en.cppreference.com/w/c/chrono/mktime\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">mktime</span></a></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">(函数) tm 转为time_t （自格林威治19700101）&nbsp;<span class=\"t-mark\" style=\"margin: 0px; padding: 0px;\"><br/></span></td></tr></tbody></table><h3 style=\"margin: 10px 0px; padding: 0px; font-size: 16px; line-height: 1.5;\"><span class=\"mw-headline\" style=\"margin: 0px; padding: 0px;\">常量：</span></h3><table class=\"t-dsc-begin\"><tbody style=\"margin: 0px; padding: 0px;\"><tr class=\"t-dsc-header firstRow\" style=\"margin: 0px; padding: 0px;\"><td colspan=\"2\" style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p>头文件：&nbsp;<code style=\"margin: 0px; padding: 0px;\">&lt;time.h&gt;</code></p></td></tr><tr class=\"t-dsc\" style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p><a title=\"c/chrono/CLOCKS PER SEC\" href=\"http://en.cppreference.com/w/c/chrono/CLOCKS_PER_SEC\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">CLOCKS_PER_SEC</span></a></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">每秒的处理器时钟数 &nbsp;<br/><span class=\"t-mark\" style=\"margin: 0px; padding: 0px;\">(macro constant)</span></td></tr></tbody></table><h3 style=\"margin: 10px 0px; padding: 0px; font-size: 16px; line-height: 1.5;\"><span class=\"mw-headline\" style=\"margin: 0px; padding: 0px;\">类型：</span></h3><table class=\"t-dsc-begin\"><tbody style=\"margin: 0px; padding: 0px;\"><tr class=\"t-dsc-header firstRow\" style=\"margin: 0px; padding: 0px;\"><td colspan=\"2\" style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p>头文件&nbsp;<code style=\"margin: 0px; padding: 0px;\">&lt;time.h&gt;</code></p></td></tr><tr class=\"t-dsc\" style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p><a title=\"c/chrono/tm\" href=\"http://en.cppreference.com/w/c/chrono/tm\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">tm</span></a></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">(struct)日历时间类型</td></tr><tr class=\"t-dsc\" style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p><a title=\"c/chrono/time t\" href=\"http://en.cppreference.com/w/c/chrono/time_t\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">time_t</span></a></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">(typedef)日历时间&nbsp;since epoch type&nbsp;</td></tr><tr class=\"t-dsc\" style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p><a title=\"c/chrono/clock t\" href=\"http://en.cppreference.com/w/c/chrono/clock_t\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">clock_t</span></a></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\">(typedef)处理器时间 since era type&nbsp;</td></tr><tr class=\"t-dsc\" style=\"margin: 0px; padding: 0px;\"><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p><a title=\"c/chrono/timespec\" href=\"http://en.cppreference.com/w/c/chrono/timespec\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">timespec</span></a></p><p><span class=\"t-lines\" style=\"margin: 0px; padding: 0px;\">(since C11)</span></p></td><td style=\"margin: 0px; padding: 3px; border-color: silver; border-collapse: collapse;\"><p style=\"margin: 10px auto;\">(struct)包括秒和纳秒的 时间</p><p style=\"margin: 10px auto;\"><tt>[可通过 函数int clock_gettime(clockid_t</tt>&nbsp;<em style=\"margin: 0px; padding: 0px;\">clock_id</em><tt>, struct timespec *</tt><em style=\"margin: 0px; padding: 0px;\">tp</em><tt>);获得，如<a class=\"external text\" href=\"http://pubs.opengroup.org/onlinepubs/9699919799/functions/clock_getres.html\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">clock_gettime(CLOCK_REALTIME, &amp;t)</a>]</tt>&nbsp;</p></td></tr></tbody></table><p style=\"margin: 10px auto; padding: 0px;\">函数和类型参考&nbsp;<a href=\"http://en.cppreference.com/w/c/chrono\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">这里</a></p><p style=\"margin: 10px auto; padding: 0px;\">函数关系图：</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p><strong style=\"margin: 0px; padding: 0px;\">2、Windows 平台的时间函数</strong></p><p style=\"margin: 10px auto; padding: 0px;\">微软官方文档：<a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms725473(v=vs.85).aspx\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">时间函数</a></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">函数</strong>常用的有：（头文件：windows.h）</p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\"><a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms724390(v=vs.85).aspx\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">GetSystemTime</a>&nbsp; &nbsp;获得UTC（等于GMT）时间</strong></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\"><a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms724338(v=vs.85).aspx\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">GetLocalTime</a>&nbsp; &nbsp; &nbsp; 获得系统本地时间</strong></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">类型</strong>：</p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\"><a href=\"https://msdn.microsoft.com/en-us/library/windows/desktop/ms724950(v=vs.85).aspx\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">SYSTEMTIME</a>&nbsp; &nbsp; &nbsp;</strong></p><p>&nbsp;<span class=\"cnblogs_code_collapse\" style=\"margin: 0px; padding: 2px; border-width: 1px; border-style: solid; border-color: gray; background-color: rgb(255, 255, 255); line-height: 1.5 !important;\">SYSTEMTIME 成员</span></p><p style=\"margin: 10px auto; padding: 0px;\">例子：</p><p><br/></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">#include&nbsp;&lt;windows.h&gt;#include&nbsp;&lt;stdio.h&gt;void&nbsp;main()\n{\n&nbsp;&nbsp;&nbsp;&nbsp;SYSTEMTIME&nbsp;st,&nbsp;lt;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;GetSystemTime(&amp;st);\n&nbsp;&nbsp;&nbsp;&nbsp;GetLocalTime(&amp;lt);\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;The&nbsp;system&nbsp;time&nbsp;is:&nbsp;%02d:%02d\\n&quot;,&nbsp;st.wHour,&nbsp;st.wMinute);\n&nbsp;&nbsp;&nbsp;&nbsp;printf(&quot;The&nbsp;local&nbsp;time&nbsp;is:&nbsp;%02d:%02d\\n&quot;,&nbsp;lt.wHour,&nbsp;lt.wMinute);\n}</pre><p><br/></p><p style=\"margin: 10px auto; padding: 0px;\">运行结果：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">The&nbsp;system&nbsp;time&nbsp;is:&nbsp;19:34The&nbsp;local&nbsp;time&nbsp;is:&nbsp;12:34</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p><strong style=\"margin: 0px; padding: 0px;\">3、Linux 平台的时间函数</strong></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">函数：</strong></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">gettimeofday &nbsp; &nbsp; &nbsp;头文件 &lt;sys/time.h&gt; 得到 timeval（精确到微秒）</strong></p><p style=\"margin: 10px auto; padding: 0px;\">　　　　　　　　 &nbsp; &nbsp;接口：int&nbsp;gettimeofday(struct timeval&nbsp;*restrict tp,&nbsp;void&nbsp;*restrict tzp);（第二个形参是基于平台实现的，使用的时候最好用NULL）</p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">类型：</strong></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">timeval</strong></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">struct&nbsp;timeval{\n&nbsp;&nbsp;&nbsp;&nbsp;time_t&nbsp;tv_sec;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/***&nbsp;&nbsp;&nbsp;&nbsp;second&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;***/\n&nbsp;&nbsp;&nbsp;&nbsp;susecond_t&nbsp;tv_usec;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/***&nbsp;microsecond&nbsp;微妙***/}</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;实例：</p><p>&nbsp;<span class=\"cnblogs_code_collapse\" style=\"margin: 0px; padding: 2px; border-width: 1px; border-style: solid; border-color: gray; background-color: rgb(255, 255, 255); line-height: 1.5 !important;\">gettimeofday 实例</span></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">附：内核时间</strong><br/><br/>内核有两个重要的全局变量:<br/><strong style=\"margin: 0px; padding: 0px;\">unsigned long jiffies;<br/>timeval xtime ;</strong><br/><br/><strong style=\"margin: 0px; padding: 0px;\">jiffies&nbsp;</strong>是记录着从电脑开机到现在总共的&quot;时钟中断&quot;的次数。<br/>文件linux-2.6.24/kernel/timer.c &nbsp;<br/>void do_timer(unsigned long ticks)<br/>{<br/>&nbsp;&nbsp;&nbsp; jiffies_64 += ticks;<br/>&nbsp;&nbsp;&nbsp; update_times(ticks);<br/>}<br/><strong style=\"margin: 0px; padding: 0px;\">xtime</strong>&nbsp;是从cmos电路或rtc芯片中取得的时间，一般是从某一历史时刻开始到现在的时间。<br/>这个就是所谓的&quot;墙上时钟walltimer&quot;，通过它可计算得出操作系统需要的日期时间，它的精确度是微秒。<br/><br/>xtime第一次赋值是在系统启动时调用timekeeping_init或time_init进行的<br/>再调用read_persistent_clock进一步调用get_rtc_time得到的<br/><br/>PS：在/proc/uptime里面的两个数字分别表示:&nbsp; &nbsp;<br/>the uptime of the system(seconds),<br/>and the amount of time spent in idle process(seconds).&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">参考：<a href=\"http://www.cnblogs.com/yaozhongxiao/archive/2013/04/14/3020353.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">这里</a>&nbsp; 和&nbsp;<a href=\"http://www.cnblogs.com/wang_yb/archive/2013/05/10/3070373.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">这里</a>（Linux内核定时器和时间管理）</p><p><strong style=\"margin: 0px; padding: 0px;\">4、其他</strong></p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">&nbsp;time_t 与 SYSTEMTIME 的转<strong style=\"margin: 0px; padding: 0px;\">换</strong>：</strong><a href=\"http://www.cnblogs.com/FCoding/archive/2012/11/09/2762982.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">(Click Here)&nbsp;</a></p><p style=\"margin: 10px auto; padding: 0px;\">关于CTime：<a href=\"http://www.cnblogs.com/wolfplan/archive/2010/09/19/1830846.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">（1）</a><a href=\"http://www.cnblogs.com/joeblackzqq/archive/2010/11/08/1872209.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">（2）</a><a href=\"http://bbs.csdn.net/topics/20437753\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">（3）</a></p><p><br/></p>', '2017-3-28 21:10:19', '2017-3-29 13:41:48', 2, 0, 0, '1', '导读在平时编程中有时需要获取当前的时间或者日期，然而不同的平台不同的场景下，有时使用的API也不尽相同。一般来说，C/C++中关于时间的标准库函数在不同的平台的都可以使用，可一些与平台相关的函数就只能在特定的平台上使用了。本文将记录C++ 中与时间相关的日期相关的函数 和 相关的数据类型。同时对不同系统平台的API进行对比，区别以加深相关知识的记忆。目录C++当中时间与日期相关的函数与类型Windows 平台的时间函数Linux 平台的时间函数其他参考：C++ API 在线1、C++中 时间与日期相关的函数与类型C++ 支持两种类型的时间操作：chrono 库，一个多样的函数集合，可以多样的、不同的精度来表示时间。 (e.g. std::chrono::time_point).（C11后的标准，有兴趣可以进一步了解）C类型 的时间和日期库。(e.g. std::time) 在这里主要记录常用的C类型的 时间和日期库。函数：时间操作头文件： <time.h>difftime(函数)计算2个时间的差值 (参数为2个time_t数据,arg1-arg2，返回值为double)time(函数)返回自格林威治1970.01.01 到现在的系统日历时间 (struct tm)clock(函数)返回自程序启动以来的 原生处理器时钟时间 （ raw processor clock time） timespec_get(since C11)(函数)返回基于一个给定 time base (如 TIME_UTC) 的日历时间 (struct timespec)格式转换头文件： <time.h>asctimeasctime_s(C11)(函数)将 tm 对象转为文本表示（通过Www Mmm dd hh:mm:ss yyyy定制） ctimectime_s(C11)(函数)将 time_t 对象转为文本表示 strftime(函数)将 tm 对象转为 自定义 的文本表示 头文件： <wchar.h>wcsftime(C95)(函数)将 tm 对象转换为 自定义的 宽字节 字符串文本 头文件： <time.h>gmtimegmtime_s(C11)(函数)time_t 转为 tm （UTC 时间） localtimelocaltime_s(C11)(函数) time_t 转为 tm （本地时间） mktime(函数) tm 转为time_t （自格林威治19700101） 常量：头文件： <time.h>CLOCKS_PER_SEC每秒的处理器时钟数  (macro constant)类型：头文件 <time.h>tm(struct)日历时间类型time_t(typedef)日历时间 since epoch type clock_t(typedef)处理器时间 since era type timespec(since C11)(struct)包括秒和纳秒的 时间[可通过 函数int clock_gettime(clockid_t clock_id, struct timespec *tp);获得，如clock_gettime(CLOCK_REALTIME, &t)] 函数和类型参考 这里函数关系图： 2、Windows 平台的时间函数微软官方文档：时间函数函数常用的有：（头文件：windows.h）GetSystemTime   获得UTC（等于GMT）时间GetLocalTime      获得系统本地时间类型：SYSTEMTIME      SYSTEMTIME 成员例子：#include <windows.h>#include <stdio.h>void main(){    SYSTEMTIME st, lt;        GetSystemTime(&st);    GetLocalTime(&lt);        printf(\"The system time is: %02d:%02d\\n\", st.wHour, st.wMinute);    printf(\"The local time is: %02d:%02d\\n\", lt.wHour, lt.wMinute);}运行结果：The system time is: 19:34The local time is: 12:34 3、Linux 平台的时间函数函数：gettimeofday      头文件 <sys/time.h> 得到 timeval（精确到微秒）　　　　　　　　    接口：int gettimeofday(struct timeval *restrict tp, void *restrict tzp);（第二个形参是基于平台实现的，使用的时候最好用NULL）类型：timevalstruct timeval{    time_t tv_sec;             /***    second      ***/    susecond_t tv_usec;        /*** microsecond 微妙***/} 实例： gettimeofday 实例附：内核时间内核有两个重要的全局变量:unsigned long jiffies;timeval xtime ;jiffies 是记录着从电脑开机到现在总共的\"时钟中断\"的次数。文件linux-2.6.24/kernel/timer.c  void do_timer(unsigned long ticks){    jiffies_64 += ticks;    update_times(ticks);}xtime 是从cmos电路或rtc芯片中取得的时间，一般是从某一历史时刻开始到现在的时间。这个就是所谓的\"墙上时钟walltimer\"，通过它可计算得出操作系统需要的日期时间，它的精确度是微秒。xtime第一次赋值是在系统启动时调用timekeeping_init或time_init进行的再调用read_persistent_clock进一步调用get_rtc_time得到的PS：在/proc/uptime里面的两个数字分别表示:   the uptime of the system(seconds),and the amount of time spent in idle process(seconds).  参考：这里  和 这里（Linux内核定时器和时间管理）4、其他 time_t 与 SYSTEMTIME 的转换：(Click Here) 关于CTime：（1）（2）（3）', '0');
INSERT INTO `t_article` VALUES ('20170328211115iuk', '20170322225547o', 'C++ —— 返回数组指针的函数 和 返回指向函数的指针的函数', '<p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">返回数组指针的函数</strong></p><p style=\"margin: 10px auto; padding: 0px;\">基础知识：数组不能被拷贝，函数不能返回数组，只能返回数组的指针或者引用。</p><p style=\"margin: 10px auto; padding: 0px;\">定义一个&nbsp;<strong style=\"margin: 0px; padding: 0px;\">返回数组指针的函数</strong>&nbsp;的方法，以 一个接收参数为 含有10个整型元素的数组的引用 &nbsp;和 返回一个含有10个整型元素的数组的指针 的函数为例。</p><p style=\"margin: 10px auto; padding: 0px;\">法一：(不使用别名)</p><p><span class=\"cnblogs_code_copy\" style=\"margin: 0px; padding: 0px 5px 0px 0px; line-height: 1.5 !important;\"><a title=\"复制代码\" style=\"margin: 0px; padding: 0px; text-decoration: underline; border: none !important;\"></a></span></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">int&nbsp;(*getCopyArr(int&nbsp;(&amp;arr)[10]))[10]\n{&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;(*n)[10]&nbsp;=&nbsp;(int&nbsp;(*)[10])new&nbsp;int[10];&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(int&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;10;&nbsp;i++)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(*n)[i]&nbsp;=&nbsp;arr[i];&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;n;\n}//note：该函数返回了分配在堆的数组，如果得到该数组后没有释放内存，会导致内存泄漏，这里仅仅作为示例不考虑该问题</pre><p><br/></p><p style=\"margin: 10px auto; padding: 0px;\">法二：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">//尾置返回类型&nbsp;（C++11标准）auto&nbsp;getCopyArr2(int(&amp;arr)[10])-&gt;int(*)[10]\n{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;getArr(arr);\n}</pre><p style=\"margin: 10px auto; padding: 0px;\">法三：</p><p><br/></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">//使用类型别名（1）typedef&nbsp;int&nbsp;arrT[10];\n\narrT*&nbsp;getCopyArr3(int(&amp;arr)[10])\n{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;getArr(arr);\n}法四：</pre><p><br/></p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">//使用类型别名(2)（C++11&nbsp;标准）using&nbsp;arrT2&nbsp;=&nbsp;int[10];\n\narrT2*&nbsp;getCopyArr4(int(&amp;arr)[10])\n{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;getArr(arr);\n}</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;声明一个&nbsp;&nbsp;<strong style=\"margin: 0px; padding: 0px;\">返回数组指针的函数</strong>&nbsp;的 函数指针的方法：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">&nbsp;(*(*getCA)((&amp;)[]))[=</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;解读： 由内到外顺序阅读理解，*getCA 的*说明getCA 为一个指针；再往外其右边有形参 (int(&amp;)[10])说明其为一个函数指针，其左边又有一个*说明该函数返回的是一个指针；继续往外，由int [10]包围，说明该返回的指针是一个 含有10个元素的数组的指针；故，该声明为 一个返回数组指针的函数的函数指针</p><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\">参考<a href=\"http://blog.csdn.net/u012333003/article/details/26133889\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">博文</a>&nbsp;&nbsp;和 《C++ primer 第5版》</p><p style=\"margin: 10px auto; padding: 0px;\">---------------------------------------------------------------------------------------</p><p style=\"margin: 10px auto; padding: 0px;\">最后来两个“提神醒脑”的例子：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">//声明一个指向含有10个元素的数组的指针，其中每个元素是一个函数指针，该函数的返回值是int，参数是int*int&nbsp;(*(*p)[10])(int&nbsp;*)//或int&nbsp;(*(*p[10]))(int&nbsp;*)//来源</pre><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">//定义一个含4个元素数组的指针，每个元素为&nbsp;函数的指针，该函数参数为&nbsp;一个含10个元素的数组的引用&nbsp;返回值为&nbsp;含10个元素的数组的指针int&nbsp;(*(*getCA[4])(int(&amp;)[10]))[10];</pre><p style=\"margin: 10px auto; padding: 0px;\">&nbsp;</p><p style=\"margin: 10px auto; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">返回指向函数的指针的函数</strong></p><p style=\"margin: 10px auto; padding: 0px;\">基础知识：和数组类似，虽然不能返回一个函数，但是能返回指向函数类型的指针</p><p style=\"margin: 10px auto; padding: 0px;\">使用别名：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">using&nbsp;F&nbsp;=&nbsp;int(int*,int);using&nbsp;PF&nbsp;=&nbsp;int(*)(int*,int);\n\nPF&nbsp;f1(int);&nbsp;//f1&nbsp;返回函数指针F*&nbsp;f2(int);&nbsp;//f2&nbsp;同上</pre><p style=\"margin: 10px auto; padding: 0px;\">使用C++11标准的尾置返回类型：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">auto&nbsp;f1(int)&nbsp;-&gt;&nbsp;int(*)(int*,in)</pre><p style=\"margin: 10px auto; padding: 0px;\">直接声明：</p><pre style=\"margin-top: 0px; margin-bottom: 0px; padding: 0px; white-space: pre-wrap; word-wrap: break-word; font-family: &quot;Courier New&quot; !important;\">int&nbsp;(*f1(int))(int*,int);</pre><p style=\"margin: 10px auto; padding: 0px;\">解读：由内到外顺序阅读理解，f1(int)有形参说明f1是一个函数，*f1(int) 说明该函数返回一个指针；继续往外发现其由int ()(int*,int)包围，说明该函数返回值为一个函数；故该声明为 一个返回函数指针的函数</p><hr/><table align=\"center\"><tbody style=\"margin: 0px; padding: 0px;\"><tr style=\"margin: 0px; padding: 0px;\" class=\"firstRow\"><td style=\"margin: 0px; padding: 0px;\"><strong style=\"margin: 0px; padding: 0px;\">版权声明</strong><br/>本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">BensonLaur</a>&nbsp; 和本文原始地址：<br/><a href=\"http://www.cnblogs.com/BensonLaur/p/6367077.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\"><span style=\"margin: 0px; padding: 0px;\">http://www.cnblogs.com/BensonLaur/p/6367077.html</span></a></td></tr></tbody></table><p>分类:&nbsp;<a href=\"http://www.cnblogs.com/BensonLaur/category/664224.html\" target=\"_blank\" style=\"margin: 0px; padding: 0px; color: rgb(0, 0, 0);\">C++</a></p><p><br/></p>', '2017-3-28 21:11:15', '2017-3-29 13:41:45', 12, 0, 0, '1', '返回数组指针的函数基础知识：数组不能被拷贝，函数不能返回数组，只能返回数组的指针或者引用。定义一个 返回数组指针的函数 的方法，以 一个接收参数为 含有10个整型元素的数组的引用  和 返回一个含有10个整型元素的数组的指针 的函数为例。法一：(不使用别名)int (*getCopyArr(int (&arr)[10]))[10]{    int (*n)[10] = (int (*)[10])new int[10];    for (int i = 0; i < 10; i++)        (*n)[i] = arr[i];    return n;}//note：该函数返回了分配在堆的数组，如果得到该数组后没有释放内存，会导致内存泄漏，这里仅仅作为示例不考虑该问题法二：//尾置返回类型 （C++11标准）auto getCopyArr2(int(&arr)[10])->int(*)[10]{    return getArr(arr);}法三：//使用类型别名（1）typedef int arrT[10];arrT* getCopyArr3(int(&arr)[10]){    return getArr(arr);}法四：//使用类型别名(2)（C++11 标准）using arrT2 = int[10];arrT2* getCopyArr4(int(&arr)[10]){    return getArr(arr);} 声明一个  返回数组指针的函数 的 函数指针的方法： (*(*getCA)((&)[]))[= 解读： 由内到外顺序阅读理解，*getCA 的*说明getCA 为一个指针；再往外其右边有形参 (int(&)[10])说明其为一个函数指针，其左边又有一个*说明该函数返回的是一个指针；继续往外，由int [10]包围，说明该返回的指针是一个 含有10个元素的数组的指针；故，该声明为 一个返回数组指针的函数的函数指针 参考博文  和 《C++ primer 第5版》---------------------------------------------------------------------------------------最后来两个“提神醒脑”的例子：//声明一个指向含有10个元素的数组的指针，其中每个元素是一个函数指针，该函数的返回值是int，参数是int*int (*(*p)[10])(int *)//或int (*(*p[10]))(int *)//来源//定义一个含4个元素数组的指针，每个元素为 函数的指针，该函数参数为 一个含10个元素的数组的引用 返回值为 含10个元素的数组的指针int (*(*getCA[4])(int(&)[10]))[10]; 返回指向函数的指针的函数基础知识：和数组类似，虽然不能返回一个函数，但是能返回指向函数类型的指针使用别名：using F = int(int*,int);using PF = int(*)(int*,int);PF f1(int); //f1 返回函数指针F* f2(int); //f2 同上使用C++11标准的尾置返回类型：auto f1(int) -> int(*)(int*,in)直接声明：int (*f1(int))(int*,int);解读：由内到外顺序阅读理解，f1(int)有形参说明f1是一个函数，*f1(int) 说明该函数返回一个指针；继续往外发现其由int ()(int*,int)包围，说明该函数返回值为一个函数；故该声明为 一个返回函数指针的函数版权声明本博客所有的原创文章，作者皆保留版权。转载必须包含本声明，保持本文完整，并以超链接形式注明作者 BensonLaur  和本文原始地址：http://www.cnblogs.com/BensonLaur/p/6367077.html分类: C++', '0');
INSERT INTO `t_article` VALUES ('20170411093702ovl', '20170321155043q', 'test', '<p><strong>fsdtt &nbsp;<em>dddddd</em></strong></p>', '2017-4-11 09:37:02', '2017-4-11 09:37:02', 4, 0, 0, '1', 'fsdtt  dddddd', '2');
INSERT INTO `t_article` VALUES ('20170625204703knv', '20170625204529f', 'test', '<p>test</p>', '2017-6-25 20:47:03', '2017-6-25 20:47:03', 3, 0, 0, '1', 'test', '0');
INSERT INTO `t_article` VALUES ('20170626083928czg', '20170625204243p', 'testtest', '<p><img src=\"http://img.baidu.com/hi/jx2/j_0057.gif\"/>test</p>', '2017-6-26 08:39:28', '2017-6-26 08:39:28', 4, 1, 0, '1', 'test', '0');
INSERT INTO `t_article` VALUES ('20170626113457ecf', '20170321155043q', 'test', '<p>test<br/></p>', '2017-6-26 11:34:57', '2017-6-26 11:34:57', 0, 0, 0, '1', 'test', '0');
